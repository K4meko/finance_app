
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model BudgetItem
 * 
 */
export type BudgetItem = $Result.DefaultSelection<Prisma.$BudgetItemPayload>
/**
 * Model MonthBudgetItem
 * 
 */
export type MonthBudgetItem = $Result.DefaultSelection<Prisma.$MonthBudgetItemPayload>
/**
 * Model MonthlyExpense
 * 
 */
export type MonthlyExpense = $Result.DefaultSelection<Prisma.$MonthlyExpensePayload>
/**
 * Model Month
 * 
 */
export type Month = $Result.DefaultSelection<Prisma.$MonthPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.budgetItem`: Exposes CRUD operations for the **BudgetItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BudgetItems
    * const budgetItems = await prisma.budgetItem.findMany()
    * ```
    */
  get budgetItem(): Prisma.BudgetItemDelegate<ExtArgs>;

  /**
   * `prisma.monthBudgetItem`: Exposes CRUD operations for the **MonthBudgetItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MonthBudgetItems
    * const monthBudgetItems = await prisma.monthBudgetItem.findMany()
    * ```
    */
  get monthBudgetItem(): Prisma.MonthBudgetItemDelegate<ExtArgs>;

  /**
   * `prisma.monthlyExpense`: Exposes CRUD operations for the **MonthlyExpense** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MonthlyExpenses
    * const monthlyExpenses = await prisma.monthlyExpense.findMany()
    * ```
    */
  get monthlyExpense(): Prisma.MonthlyExpenseDelegate<ExtArgs>;

  /**
   * `prisma.month`: Exposes CRUD operations for the **Month** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Months
    * const months = await prisma.month.findMany()
    * ```
    */
  get month(): Prisma.MonthDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.21.1
   * Query Engine version: bf0e5e8a04cada8225617067eaa03d041e2bba36
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    BudgetItem: 'BudgetItem',
    MonthBudgetItem: 'MonthBudgetItem',
    MonthlyExpense: 'MonthlyExpense',
    Month: 'Month'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "budgetItem" | "monthBudgetItem" | "monthlyExpense" | "month"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      BudgetItem: {
        payload: Prisma.$BudgetItemPayload<ExtArgs>
        fields: Prisma.BudgetItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BudgetItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BudgetItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetItemPayload>
          }
          findFirst: {
            args: Prisma.BudgetItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BudgetItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetItemPayload>
          }
          findMany: {
            args: Prisma.BudgetItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetItemPayload>[]
          }
          create: {
            args: Prisma.BudgetItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetItemPayload>
          }
          createMany: {
            args: Prisma.BudgetItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BudgetItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetItemPayload>[]
          }
          delete: {
            args: Prisma.BudgetItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetItemPayload>
          }
          update: {
            args: Prisma.BudgetItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetItemPayload>
          }
          deleteMany: {
            args: Prisma.BudgetItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BudgetItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BudgetItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BudgetItemPayload>
          }
          aggregate: {
            args: Prisma.BudgetItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBudgetItem>
          }
          groupBy: {
            args: Prisma.BudgetItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<BudgetItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.BudgetItemCountArgs<ExtArgs>
            result: $Utils.Optional<BudgetItemCountAggregateOutputType> | number
          }
        }
      }
      MonthBudgetItem: {
        payload: Prisma.$MonthBudgetItemPayload<ExtArgs>
        fields: Prisma.MonthBudgetItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MonthBudgetItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MonthBudgetItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MonthBudgetItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MonthBudgetItemPayload>
          }
          findFirst: {
            args: Prisma.MonthBudgetItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MonthBudgetItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MonthBudgetItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MonthBudgetItemPayload>
          }
          findMany: {
            args: Prisma.MonthBudgetItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MonthBudgetItemPayload>[]
          }
          create: {
            args: Prisma.MonthBudgetItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MonthBudgetItemPayload>
          }
          createMany: {
            args: Prisma.MonthBudgetItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MonthBudgetItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MonthBudgetItemPayload>[]
          }
          delete: {
            args: Prisma.MonthBudgetItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MonthBudgetItemPayload>
          }
          update: {
            args: Prisma.MonthBudgetItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MonthBudgetItemPayload>
          }
          deleteMany: {
            args: Prisma.MonthBudgetItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MonthBudgetItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MonthBudgetItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MonthBudgetItemPayload>
          }
          aggregate: {
            args: Prisma.MonthBudgetItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMonthBudgetItem>
          }
          groupBy: {
            args: Prisma.MonthBudgetItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<MonthBudgetItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.MonthBudgetItemCountArgs<ExtArgs>
            result: $Utils.Optional<MonthBudgetItemCountAggregateOutputType> | number
          }
        }
      }
      MonthlyExpense: {
        payload: Prisma.$MonthlyExpensePayload<ExtArgs>
        fields: Prisma.MonthlyExpenseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MonthlyExpenseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MonthlyExpensePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MonthlyExpenseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MonthlyExpensePayload>
          }
          findFirst: {
            args: Prisma.MonthlyExpenseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MonthlyExpensePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MonthlyExpenseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MonthlyExpensePayload>
          }
          findMany: {
            args: Prisma.MonthlyExpenseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MonthlyExpensePayload>[]
          }
          create: {
            args: Prisma.MonthlyExpenseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MonthlyExpensePayload>
          }
          createMany: {
            args: Prisma.MonthlyExpenseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MonthlyExpenseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MonthlyExpensePayload>[]
          }
          delete: {
            args: Prisma.MonthlyExpenseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MonthlyExpensePayload>
          }
          update: {
            args: Prisma.MonthlyExpenseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MonthlyExpensePayload>
          }
          deleteMany: {
            args: Prisma.MonthlyExpenseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MonthlyExpenseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MonthlyExpenseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MonthlyExpensePayload>
          }
          aggregate: {
            args: Prisma.MonthlyExpenseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMonthlyExpense>
          }
          groupBy: {
            args: Prisma.MonthlyExpenseGroupByArgs<ExtArgs>
            result: $Utils.Optional<MonthlyExpenseGroupByOutputType>[]
          }
          count: {
            args: Prisma.MonthlyExpenseCountArgs<ExtArgs>
            result: $Utils.Optional<MonthlyExpenseCountAggregateOutputType> | number
          }
        }
      }
      Month: {
        payload: Prisma.$MonthPayload<ExtArgs>
        fields: Prisma.MonthFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MonthFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MonthPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MonthFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MonthPayload>
          }
          findFirst: {
            args: Prisma.MonthFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MonthPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MonthFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MonthPayload>
          }
          findMany: {
            args: Prisma.MonthFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MonthPayload>[]
          }
          create: {
            args: Prisma.MonthCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MonthPayload>
          }
          createMany: {
            args: Prisma.MonthCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MonthCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MonthPayload>[]
          }
          delete: {
            args: Prisma.MonthDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MonthPayload>
          }
          update: {
            args: Prisma.MonthUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MonthPayload>
          }
          deleteMany: {
            args: Prisma.MonthDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MonthUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MonthUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MonthPayload>
          }
          aggregate: {
            args: Prisma.MonthAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMonth>
          }
          groupBy: {
            args: Prisma.MonthGroupByArgs<ExtArgs>
            result: $Utils.Optional<MonthGroupByOutputType>[]
          }
          count: {
            args: Prisma.MonthCountArgs<ExtArgs>
            result: $Utils.Optional<MonthCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    months: number
    monthlyExpenses: number
    defaultBudget: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    months?: boolean | UserCountOutputTypeCountMonthsArgs
    monthlyExpenses?: boolean | UserCountOutputTypeCountMonthlyExpensesArgs
    defaultBudget?: boolean | UserCountOutputTypeCountDefaultBudgetArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMonthsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MonthWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMonthlyExpensesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MonthlyExpenseWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDefaultBudgetArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BudgetItemWhereInput
  }


  /**
   * Count Type MonthCountOutputType
   */

  export type MonthCountOutputType = {
    budget: number
  }

  export type MonthCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    budget?: boolean | MonthCountOutputTypeCountBudgetArgs
  }

  // Custom InputTypes
  /**
   * MonthCountOutputType without action
   */
  export type MonthCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MonthCountOutputType
     */
    select?: MonthCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MonthCountOutputType without action
   */
  export type MonthCountOutputTypeCountBudgetArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MonthBudgetItemWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    salaryAmount: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    salaryAmount: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    firstName: string | null
    lastName: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
    expectedDatePaycheck: Date | null
    salaryAmount: number | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    firstName: string | null
    lastName: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
    expectedDatePaycheck: Date | null
    salaryAmount: number | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    firstName: number
    lastName: number
    password: number
    createdAt: number
    updatedAt: number
    expectedDatePaycheck: number
    salaryAmount: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    salaryAmount?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    salaryAmount?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    firstName?: true
    lastName?: true
    password?: true
    createdAt?: true
    updatedAt?: true
    expectedDatePaycheck?: true
    salaryAmount?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    firstName?: true
    lastName?: true
    password?: true
    createdAt?: true
    updatedAt?: true
    expectedDatePaycheck?: true
    salaryAmount?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    firstName?: true
    lastName?: true
    password?: true
    createdAt?: true
    updatedAt?: true
    expectedDatePaycheck?: true
    salaryAmount?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string
    firstName: string | null
    lastName: string | null
    password: string
    createdAt: Date
    updatedAt: Date
    expectedDatePaycheck: Date | null
    salaryAmount: number | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    firstName?: boolean
    lastName?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    expectedDatePaycheck?: boolean
    salaryAmount?: boolean
    months?: boolean | User$monthsArgs<ExtArgs>
    monthlyExpenses?: boolean | User$monthlyExpensesArgs<ExtArgs>
    defaultBudget?: boolean | User$defaultBudgetArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    firstName?: boolean
    lastName?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    expectedDatePaycheck?: boolean
    salaryAmount?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    firstName?: boolean
    lastName?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    expectedDatePaycheck?: boolean
    salaryAmount?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    months?: boolean | User$monthsArgs<ExtArgs>
    monthlyExpenses?: boolean | User$monthlyExpensesArgs<ExtArgs>
    defaultBudget?: boolean | User$defaultBudgetArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      months: Prisma.$MonthPayload<ExtArgs>[]
      monthlyExpenses: Prisma.$MonthlyExpensePayload<ExtArgs>[]
      defaultBudget: Prisma.$BudgetItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      firstName: string | null
      lastName: string | null
      password: string
      createdAt: Date
      updatedAt: Date
      expectedDatePaycheck: Date | null
      salaryAmount: number | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    months<T extends User$monthsArgs<ExtArgs> = {}>(args?: Subset<T, User$monthsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MonthPayload<ExtArgs>, T, "findMany"> | Null>
    monthlyExpenses<T extends User$monthlyExpensesArgs<ExtArgs> = {}>(args?: Subset<T, User$monthlyExpensesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MonthlyExpensePayload<ExtArgs>, T, "findMany"> | Null>
    defaultBudget<T extends User$defaultBudgetArgs<ExtArgs> = {}>(args?: Subset<T, User$defaultBudgetArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BudgetItemPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly expectedDatePaycheck: FieldRef<"User", 'DateTime'>
    readonly salaryAmount: FieldRef<"User", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.months
   */
  export type User$monthsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Month
     */
    select?: MonthSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonthInclude<ExtArgs> | null
    where?: MonthWhereInput
    orderBy?: MonthOrderByWithRelationInput | MonthOrderByWithRelationInput[]
    cursor?: MonthWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MonthScalarFieldEnum | MonthScalarFieldEnum[]
  }

  /**
   * User.monthlyExpenses
   */
  export type User$monthlyExpensesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MonthlyExpense
     */
    select?: MonthlyExpenseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonthlyExpenseInclude<ExtArgs> | null
    where?: MonthlyExpenseWhereInput
    orderBy?: MonthlyExpenseOrderByWithRelationInput | MonthlyExpenseOrderByWithRelationInput[]
    cursor?: MonthlyExpenseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MonthlyExpenseScalarFieldEnum | MonthlyExpenseScalarFieldEnum[]
  }

  /**
   * User.defaultBudget
   */
  export type User$defaultBudgetArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BudgetItem
     */
    select?: BudgetItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetItemInclude<ExtArgs> | null
    where?: BudgetItemWhereInput
    orderBy?: BudgetItemOrderByWithRelationInput | BudgetItemOrderByWithRelationInput[]
    cursor?: BudgetItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BudgetItemScalarFieldEnum | BudgetItemScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model BudgetItem
   */

  export type AggregateBudgetItem = {
    _count: BudgetItemCountAggregateOutputType | null
    _avg: BudgetItemAvgAggregateOutputType | null
    _sum: BudgetItemSumAggregateOutputType | null
    _min: BudgetItemMinAggregateOutputType | null
    _max: BudgetItemMaxAggregateOutputType | null
  }

  export type BudgetItemAvgAggregateOutputType = {
    id: number | null
    amount: number | null
    userId: number | null
  }

  export type BudgetItemSumAggregateOutputType = {
    id: number | null
    amount: number | null
    userId: number | null
  }

  export type BudgetItemMinAggregateOutputType = {
    id: number | null
    amount: number | null
    type: string | null
    userId: number | null
  }

  export type BudgetItemMaxAggregateOutputType = {
    id: number | null
    amount: number | null
    type: string | null
    userId: number | null
  }

  export type BudgetItemCountAggregateOutputType = {
    id: number
    amount: number
    type: number
    userId: number
    _all: number
  }


  export type BudgetItemAvgAggregateInputType = {
    id?: true
    amount?: true
    userId?: true
  }

  export type BudgetItemSumAggregateInputType = {
    id?: true
    amount?: true
    userId?: true
  }

  export type BudgetItemMinAggregateInputType = {
    id?: true
    amount?: true
    type?: true
    userId?: true
  }

  export type BudgetItemMaxAggregateInputType = {
    id?: true
    amount?: true
    type?: true
    userId?: true
  }

  export type BudgetItemCountAggregateInputType = {
    id?: true
    amount?: true
    type?: true
    userId?: true
    _all?: true
  }

  export type BudgetItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BudgetItem to aggregate.
     */
    where?: BudgetItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BudgetItems to fetch.
     */
    orderBy?: BudgetItemOrderByWithRelationInput | BudgetItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BudgetItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BudgetItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BudgetItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BudgetItems
    **/
    _count?: true | BudgetItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BudgetItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BudgetItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BudgetItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BudgetItemMaxAggregateInputType
  }

  export type GetBudgetItemAggregateType<T extends BudgetItemAggregateArgs> = {
        [P in keyof T & keyof AggregateBudgetItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBudgetItem[P]>
      : GetScalarType<T[P], AggregateBudgetItem[P]>
  }




  export type BudgetItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BudgetItemWhereInput
    orderBy?: BudgetItemOrderByWithAggregationInput | BudgetItemOrderByWithAggregationInput[]
    by: BudgetItemScalarFieldEnum[] | BudgetItemScalarFieldEnum
    having?: BudgetItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BudgetItemCountAggregateInputType | true
    _avg?: BudgetItemAvgAggregateInputType
    _sum?: BudgetItemSumAggregateInputType
    _min?: BudgetItemMinAggregateInputType
    _max?: BudgetItemMaxAggregateInputType
  }

  export type BudgetItemGroupByOutputType = {
    id: number
    amount: number
    type: string
    userId: number
    _count: BudgetItemCountAggregateOutputType | null
    _avg: BudgetItemAvgAggregateOutputType | null
    _sum: BudgetItemSumAggregateOutputType | null
    _min: BudgetItemMinAggregateOutputType | null
    _max: BudgetItemMaxAggregateOutputType | null
  }

  type GetBudgetItemGroupByPayload<T extends BudgetItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BudgetItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BudgetItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BudgetItemGroupByOutputType[P]>
            : GetScalarType<T[P], BudgetItemGroupByOutputType[P]>
        }
      >
    >


  export type BudgetItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    amount?: boolean
    type?: boolean
    userId?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["budgetItem"]>

  export type BudgetItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    amount?: boolean
    type?: boolean
    userId?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["budgetItem"]>

  export type BudgetItemSelectScalar = {
    id?: boolean
    amount?: boolean
    type?: boolean
    userId?: boolean
  }

  export type BudgetItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type BudgetItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $BudgetItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BudgetItem"
    objects: {
      User: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      amount: number
      type: string
      userId: number
    }, ExtArgs["result"]["budgetItem"]>
    composites: {}
  }

  type BudgetItemGetPayload<S extends boolean | null | undefined | BudgetItemDefaultArgs> = $Result.GetResult<Prisma.$BudgetItemPayload, S>

  type BudgetItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BudgetItemFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BudgetItemCountAggregateInputType | true
    }

  export interface BudgetItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BudgetItem'], meta: { name: 'BudgetItem' } }
    /**
     * Find zero or one BudgetItem that matches the filter.
     * @param {BudgetItemFindUniqueArgs} args - Arguments to find a BudgetItem
     * @example
     * // Get one BudgetItem
     * const budgetItem = await prisma.budgetItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BudgetItemFindUniqueArgs>(args: SelectSubset<T, BudgetItemFindUniqueArgs<ExtArgs>>): Prisma__BudgetItemClient<$Result.GetResult<Prisma.$BudgetItemPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one BudgetItem that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BudgetItemFindUniqueOrThrowArgs} args - Arguments to find a BudgetItem
     * @example
     * // Get one BudgetItem
     * const budgetItem = await prisma.budgetItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BudgetItemFindUniqueOrThrowArgs>(args: SelectSubset<T, BudgetItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BudgetItemClient<$Result.GetResult<Prisma.$BudgetItemPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first BudgetItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetItemFindFirstArgs} args - Arguments to find a BudgetItem
     * @example
     * // Get one BudgetItem
     * const budgetItem = await prisma.budgetItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BudgetItemFindFirstArgs>(args?: SelectSubset<T, BudgetItemFindFirstArgs<ExtArgs>>): Prisma__BudgetItemClient<$Result.GetResult<Prisma.$BudgetItemPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first BudgetItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetItemFindFirstOrThrowArgs} args - Arguments to find a BudgetItem
     * @example
     * // Get one BudgetItem
     * const budgetItem = await prisma.budgetItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BudgetItemFindFirstOrThrowArgs>(args?: SelectSubset<T, BudgetItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__BudgetItemClient<$Result.GetResult<Prisma.$BudgetItemPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more BudgetItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BudgetItems
     * const budgetItems = await prisma.budgetItem.findMany()
     * 
     * // Get first 10 BudgetItems
     * const budgetItems = await prisma.budgetItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const budgetItemWithIdOnly = await prisma.budgetItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BudgetItemFindManyArgs>(args?: SelectSubset<T, BudgetItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BudgetItemPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a BudgetItem.
     * @param {BudgetItemCreateArgs} args - Arguments to create a BudgetItem.
     * @example
     * // Create one BudgetItem
     * const BudgetItem = await prisma.budgetItem.create({
     *   data: {
     *     // ... data to create a BudgetItem
     *   }
     * })
     * 
     */
    create<T extends BudgetItemCreateArgs>(args: SelectSubset<T, BudgetItemCreateArgs<ExtArgs>>): Prisma__BudgetItemClient<$Result.GetResult<Prisma.$BudgetItemPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many BudgetItems.
     * @param {BudgetItemCreateManyArgs} args - Arguments to create many BudgetItems.
     * @example
     * // Create many BudgetItems
     * const budgetItem = await prisma.budgetItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BudgetItemCreateManyArgs>(args?: SelectSubset<T, BudgetItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BudgetItems and returns the data saved in the database.
     * @param {BudgetItemCreateManyAndReturnArgs} args - Arguments to create many BudgetItems.
     * @example
     * // Create many BudgetItems
     * const budgetItem = await prisma.budgetItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BudgetItems and only return the `id`
     * const budgetItemWithIdOnly = await prisma.budgetItem.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BudgetItemCreateManyAndReturnArgs>(args?: SelectSubset<T, BudgetItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BudgetItemPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a BudgetItem.
     * @param {BudgetItemDeleteArgs} args - Arguments to delete one BudgetItem.
     * @example
     * // Delete one BudgetItem
     * const BudgetItem = await prisma.budgetItem.delete({
     *   where: {
     *     // ... filter to delete one BudgetItem
     *   }
     * })
     * 
     */
    delete<T extends BudgetItemDeleteArgs>(args: SelectSubset<T, BudgetItemDeleteArgs<ExtArgs>>): Prisma__BudgetItemClient<$Result.GetResult<Prisma.$BudgetItemPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one BudgetItem.
     * @param {BudgetItemUpdateArgs} args - Arguments to update one BudgetItem.
     * @example
     * // Update one BudgetItem
     * const budgetItem = await prisma.budgetItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BudgetItemUpdateArgs>(args: SelectSubset<T, BudgetItemUpdateArgs<ExtArgs>>): Prisma__BudgetItemClient<$Result.GetResult<Prisma.$BudgetItemPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more BudgetItems.
     * @param {BudgetItemDeleteManyArgs} args - Arguments to filter BudgetItems to delete.
     * @example
     * // Delete a few BudgetItems
     * const { count } = await prisma.budgetItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BudgetItemDeleteManyArgs>(args?: SelectSubset<T, BudgetItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BudgetItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BudgetItems
     * const budgetItem = await prisma.budgetItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BudgetItemUpdateManyArgs>(args: SelectSubset<T, BudgetItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BudgetItem.
     * @param {BudgetItemUpsertArgs} args - Arguments to update or create a BudgetItem.
     * @example
     * // Update or create a BudgetItem
     * const budgetItem = await prisma.budgetItem.upsert({
     *   create: {
     *     // ... data to create a BudgetItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BudgetItem we want to update
     *   }
     * })
     */
    upsert<T extends BudgetItemUpsertArgs>(args: SelectSubset<T, BudgetItemUpsertArgs<ExtArgs>>): Prisma__BudgetItemClient<$Result.GetResult<Prisma.$BudgetItemPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of BudgetItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetItemCountArgs} args - Arguments to filter BudgetItems to count.
     * @example
     * // Count the number of BudgetItems
     * const count = await prisma.budgetItem.count({
     *   where: {
     *     // ... the filter for the BudgetItems we want to count
     *   }
     * })
    **/
    count<T extends BudgetItemCountArgs>(
      args?: Subset<T, BudgetItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BudgetItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BudgetItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BudgetItemAggregateArgs>(args: Subset<T, BudgetItemAggregateArgs>): Prisma.PrismaPromise<GetBudgetItemAggregateType<T>>

    /**
     * Group by BudgetItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BudgetItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BudgetItemGroupByArgs['orderBy'] }
        : { orderBy?: BudgetItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BudgetItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBudgetItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BudgetItem model
   */
  readonly fields: BudgetItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BudgetItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BudgetItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BudgetItem model
   */ 
  interface BudgetItemFieldRefs {
    readonly id: FieldRef<"BudgetItem", 'Int'>
    readonly amount: FieldRef<"BudgetItem", 'Float'>
    readonly type: FieldRef<"BudgetItem", 'String'>
    readonly userId: FieldRef<"BudgetItem", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * BudgetItem findUnique
   */
  export type BudgetItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BudgetItem
     */
    select?: BudgetItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetItemInclude<ExtArgs> | null
    /**
     * Filter, which BudgetItem to fetch.
     */
    where: BudgetItemWhereUniqueInput
  }

  /**
   * BudgetItem findUniqueOrThrow
   */
  export type BudgetItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BudgetItem
     */
    select?: BudgetItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetItemInclude<ExtArgs> | null
    /**
     * Filter, which BudgetItem to fetch.
     */
    where: BudgetItemWhereUniqueInput
  }

  /**
   * BudgetItem findFirst
   */
  export type BudgetItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BudgetItem
     */
    select?: BudgetItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetItemInclude<ExtArgs> | null
    /**
     * Filter, which BudgetItem to fetch.
     */
    where?: BudgetItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BudgetItems to fetch.
     */
    orderBy?: BudgetItemOrderByWithRelationInput | BudgetItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BudgetItems.
     */
    cursor?: BudgetItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BudgetItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BudgetItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BudgetItems.
     */
    distinct?: BudgetItemScalarFieldEnum | BudgetItemScalarFieldEnum[]
  }

  /**
   * BudgetItem findFirstOrThrow
   */
  export type BudgetItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BudgetItem
     */
    select?: BudgetItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetItemInclude<ExtArgs> | null
    /**
     * Filter, which BudgetItem to fetch.
     */
    where?: BudgetItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BudgetItems to fetch.
     */
    orderBy?: BudgetItemOrderByWithRelationInput | BudgetItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BudgetItems.
     */
    cursor?: BudgetItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BudgetItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BudgetItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BudgetItems.
     */
    distinct?: BudgetItemScalarFieldEnum | BudgetItemScalarFieldEnum[]
  }

  /**
   * BudgetItem findMany
   */
  export type BudgetItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BudgetItem
     */
    select?: BudgetItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetItemInclude<ExtArgs> | null
    /**
     * Filter, which BudgetItems to fetch.
     */
    where?: BudgetItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BudgetItems to fetch.
     */
    orderBy?: BudgetItemOrderByWithRelationInput | BudgetItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BudgetItems.
     */
    cursor?: BudgetItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BudgetItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BudgetItems.
     */
    skip?: number
    distinct?: BudgetItemScalarFieldEnum | BudgetItemScalarFieldEnum[]
  }

  /**
   * BudgetItem create
   */
  export type BudgetItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BudgetItem
     */
    select?: BudgetItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetItemInclude<ExtArgs> | null
    /**
     * The data needed to create a BudgetItem.
     */
    data: XOR<BudgetItemCreateInput, BudgetItemUncheckedCreateInput>
  }

  /**
   * BudgetItem createMany
   */
  export type BudgetItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BudgetItems.
     */
    data: BudgetItemCreateManyInput | BudgetItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BudgetItem createManyAndReturn
   */
  export type BudgetItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BudgetItem
     */
    select?: BudgetItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many BudgetItems.
     */
    data: BudgetItemCreateManyInput | BudgetItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BudgetItem update
   */
  export type BudgetItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BudgetItem
     */
    select?: BudgetItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetItemInclude<ExtArgs> | null
    /**
     * The data needed to update a BudgetItem.
     */
    data: XOR<BudgetItemUpdateInput, BudgetItemUncheckedUpdateInput>
    /**
     * Choose, which BudgetItem to update.
     */
    where: BudgetItemWhereUniqueInput
  }

  /**
   * BudgetItem updateMany
   */
  export type BudgetItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BudgetItems.
     */
    data: XOR<BudgetItemUpdateManyMutationInput, BudgetItemUncheckedUpdateManyInput>
    /**
     * Filter which BudgetItems to update
     */
    where?: BudgetItemWhereInput
  }

  /**
   * BudgetItem upsert
   */
  export type BudgetItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BudgetItem
     */
    select?: BudgetItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetItemInclude<ExtArgs> | null
    /**
     * The filter to search for the BudgetItem to update in case it exists.
     */
    where: BudgetItemWhereUniqueInput
    /**
     * In case the BudgetItem found by the `where` argument doesn't exist, create a new BudgetItem with this data.
     */
    create: XOR<BudgetItemCreateInput, BudgetItemUncheckedCreateInput>
    /**
     * In case the BudgetItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BudgetItemUpdateInput, BudgetItemUncheckedUpdateInput>
  }

  /**
   * BudgetItem delete
   */
  export type BudgetItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BudgetItem
     */
    select?: BudgetItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetItemInclude<ExtArgs> | null
    /**
     * Filter which BudgetItem to delete.
     */
    where: BudgetItemWhereUniqueInput
  }

  /**
   * BudgetItem deleteMany
   */
  export type BudgetItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BudgetItems to delete
     */
    where?: BudgetItemWhereInput
  }

  /**
   * BudgetItem without action
   */
  export type BudgetItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BudgetItem
     */
    select?: BudgetItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BudgetItemInclude<ExtArgs> | null
  }


  /**
   * Model MonthBudgetItem
   */

  export type AggregateMonthBudgetItem = {
    _count: MonthBudgetItemCountAggregateOutputType | null
    _avg: MonthBudgetItemAvgAggregateOutputType | null
    _sum: MonthBudgetItemSumAggregateOutputType | null
    _min: MonthBudgetItemMinAggregateOutputType | null
    _max: MonthBudgetItemMaxAggregateOutputType | null
  }

  export type MonthBudgetItemAvgAggregateOutputType = {
    id: number | null
    amount: number | null
    monthId: number | null
  }

  export type MonthBudgetItemSumAggregateOutputType = {
    id: number | null
    amount: number | null
    monthId: number | null
  }

  export type MonthBudgetItemMinAggregateOutputType = {
    id: number | null
    amount: number | null
    type: string | null
    monthId: number | null
  }

  export type MonthBudgetItemMaxAggregateOutputType = {
    id: number | null
    amount: number | null
    type: string | null
    monthId: number | null
  }

  export type MonthBudgetItemCountAggregateOutputType = {
    id: number
    amount: number
    type: number
    monthId: number
    _all: number
  }


  export type MonthBudgetItemAvgAggregateInputType = {
    id?: true
    amount?: true
    monthId?: true
  }

  export type MonthBudgetItemSumAggregateInputType = {
    id?: true
    amount?: true
    monthId?: true
  }

  export type MonthBudgetItemMinAggregateInputType = {
    id?: true
    amount?: true
    type?: true
    monthId?: true
  }

  export type MonthBudgetItemMaxAggregateInputType = {
    id?: true
    amount?: true
    type?: true
    monthId?: true
  }

  export type MonthBudgetItemCountAggregateInputType = {
    id?: true
    amount?: true
    type?: true
    monthId?: true
    _all?: true
  }

  export type MonthBudgetItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MonthBudgetItem to aggregate.
     */
    where?: MonthBudgetItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MonthBudgetItems to fetch.
     */
    orderBy?: MonthBudgetItemOrderByWithRelationInput | MonthBudgetItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MonthBudgetItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MonthBudgetItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MonthBudgetItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MonthBudgetItems
    **/
    _count?: true | MonthBudgetItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MonthBudgetItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MonthBudgetItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MonthBudgetItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MonthBudgetItemMaxAggregateInputType
  }

  export type GetMonthBudgetItemAggregateType<T extends MonthBudgetItemAggregateArgs> = {
        [P in keyof T & keyof AggregateMonthBudgetItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMonthBudgetItem[P]>
      : GetScalarType<T[P], AggregateMonthBudgetItem[P]>
  }




  export type MonthBudgetItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MonthBudgetItemWhereInput
    orderBy?: MonthBudgetItemOrderByWithAggregationInput | MonthBudgetItemOrderByWithAggregationInput[]
    by: MonthBudgetItemScalarFieldEnum[] | MonthBudgetItemScalarFieldEnum
    having?: MonthBudgetItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MonthBudgetItemCountAggregateInputType | true
    _avg?: MonthBudgetItemAvgAggregateInputType
    _sum?: MonthBudgetItemSumAggregateInputType
    _min?: MonthBudgetItemMinAggregateInputType
    _max?: MonthBudgetItemMaxAggregateInputType
  }

  export type MonthBudgetItemGroupByOutputType = {
    id: number
    amount: number
    type: string
    monthId: number
    _count: MonthBudgetItemCountAggregateOutputType | null
    _avg: MonthBudgetItemAvgAggregateOutputType | null
    _sum: MonthBudgetItemSumAggregateOutputType | null
    _min: MonthBudgetItemMinAggregateOutputType | null
    _max: MonthBudgetItemMaxAggregateOutputType | null
  }

  type GetMonthBudgetItemGroupByPayload<T extends MonthBudgetItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MonthBudgetItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MonthBudgetItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MonthBudgetItemGroupByOutputType[P]>
            : GetScalarType<T[P], MonthBudgetItemGroupByOutputType[P]>
        }
      >
    >


  export type MonthBudgetItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    amount?: boolean
    type?: boolean
    monthId?: boolean
    Month?: boolean | MonthDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["monthBudgetItem"]>

  export type MonthBudgetItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    amount?: boolean
    type?: boolean
    monthId?: boolean
    Month?: boolean | MonthDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["monthBudgetItem"]>

  export type MonthBudgetItemSelectScalar = {
    id?: boolean
    amount?: boolean
    type?: boolean
    monthId?: boolean
  }

  export type MonthBudgetItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Month?: boolean | MonthDefaultArgs<ExtArgs>
  }
  export type MonthBudgetItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Month?: boolean | MonthDefaultArgs<ExtArgs>
  }

  export type $MonthBudgetItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MonthBudgetItem"
    objects: {
      Month: Prisma.$MonthPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      amount: number
      type: string
      monthId: number
    }, ExtArgs["result"]["monthBudgetItem"]>
    composites: {}
  }

  type MonthBudgetItemGetPayload<S extends boolean | null | undefined | MonthBudgetItemDefaultArgs> = $Result.GetResult<Prisma.$MonthBudgetItemPayload, S>

  type MonthBudgetItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MonthBudgetItemFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MonthBudgetItemCountAggregateInputType | true
    }

  export interface MonthBudgetItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MonthBudgetItem'], meta: { name: 'MonthBudgetItem' } }
    /**
     * Find zero or one MonthBudgetItem that matches the filter.
     * @param {MonthBudgetItemFindUniqueArgs} args - Arguments to find a MonthBudgetItem
     * @example
     * // Get one MonthBudgetItem
     * const monthBudgetItem = await prisma.monthBudgetItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MonthBudgetItemFindUniqueArgs>(args: SelectSubset<T, MonthBudgetItemFindUniqueArgs<ExtArgs>>): Prisma__MonthBudgetItemClient<$Result.GetResult<Prisma.$MonthBudgetItemPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one MonthBudgetItem that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MonthBudgetItemFindUniqueOrThrowArgs} args - Arguments to find a MonthBudgetItem
     * @example
     * // Get one MonthBudgetItem
     * const monthBudgetItem = await prisma.monthBudgetItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MonthBudgetItemFindUniqueOrThrowArgs>(args: SelectSubset<T, MonthBudgetItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MonthBudgetItemClient<$Result.GetResult<Prisma.$MonthBudgetItemPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first MonthBudgetItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MonthBudgetItemFindFirstArgs} args - Arguments to find a MonthBudgetItem
     * @example
     * // Get one MonthBudgetItem
     * const monthBudgetItem = await prisma.monthBudgetItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MonthBudgetItemFindFirstArgs>(args?: SelectSubset<T, MonthBudgetItemFindFirstArgs<ExtArgs>>): Prisma__MonthBudgetItemClient<$Result.GetResult<Prisma.$MonthBudgetItemPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first MonthBudgetItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MonthBudgetItemFindFirstOrThrowArgs} args - Arguments to find a MonthBudgetItem
     * @example
     * // Get one MonthBudgetItem
     * const monthBudgetItem = await prisma.monthBudgetItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MonthBudgetItemFindFirstOrThrowArgs>(args?: SelectSubset<T, MonthBudgetItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__MonthBudgetItemClient<$Result.GetResult<Prisma.$MonthBudgetItemPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more MonthBudgetItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MonthBudgetItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MonthBudgetItems
     * const monthBudgetItems = await prisma.monthBudgetItem.findMany()
     * 
     * // Get first 10 MonthBudgetItems
     * const monthBudgetItems = await prisma.monthBudgetItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const monthBudgetItemWithIdOnly = await prisma.monthBudgetItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MonthBudgetItemFindManyArgs>(args?: SelectSubset<T, MonthBudgetItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MonthBudgetItemPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a MonthBudgetItem.
     * @param {MonthBudgetItemCreateArgs} args - Arguments to create a MonthBudgetItem.
     * @example
     * // Create one MonthBudgetItem
     * const MonthBudgetItem = await prisma.monthBudgetItem.create({
     *   data: {
     *     // ... data to create a MonthBudgetItem
     *   }
     * })
     * 
     */
    create<T extends MonthBudgetItemCreateArgs>(args: SelectSubset<T, MonthBudgetItemCreateArgs<ExtArgs>>): Prisma__MonthBudgetItemClient<$Result.GetResult<Prisma.$MonthBudgetItemPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many MonthBudgetItems.
     * @param {MonthBudgetItemCreateManyArgs} args - Arguments to create many MonthBudgetItems.
     * @example
     * // Create many MonthBudgetItems
     * const monthBudgetItem = await prisma.monthBudgetItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MonthBudgetItemCreateManyArgs>(args?: SelectSubset<T, MonthBudgetItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MonthBudgetItems and returns the data saved in the database.
     * @param {MonthBudgetItemCreateManyAndReturnArgs} args - Arguments to create many MonthBudgetItems.
     * @example
     * // Create many MonthBudgetItems
     * const monthBudgetItem = await prisma.monthBudgetItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MonthBudgetItems and only return the `id`
     * const monthBudgetItemWithIdOnly = await prisma.monthBudgetItem.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MonthBudgetItemCreateManyAndReturnArgs>(args?: SelectSubset<T, MonthBudgetItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MonthBudgetItemPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a MonthBudgetItem.
     * @param {MonthBudgetItemDeleteArgs} args - Arguments to delete one MonthBudgetItem.
     * @example
     * // Delete one MonthBudgetItem
     * const MonthBudgetItem = await prisma.monthBudgetItem.delete({
     *   where: {
     *     // ... filter to delete one MonthBudgetItem
     *   }
     * })
     * 
     */
    delete<T extends MonthBudgetItemDeleteArgs>(args: SelectSubset<T, MonthBudgetItemDeleteArgs<ExtArgs>>): Prisma__MonthBudgetItemClient<$Result.GetResult<Prisma.$MonthBudgetItemPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one MonthBudgetItem.
     * @param {MonthBudgetItemUpdateArgs} args - Arguments to update one MonthBudgetItem.
     * @example
     * // Update one MonthBudgetItem
     * const monthBudgetItem = await prisma.monthBudgetItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MonthBudgetItemUpdateArgs>(args: SelectSubset<T, MonthBudgetItemUpdateArgs<ExtArgs>>): Prisma__MonthBudgetItemClient<$Result.GetResult<Prisma.$MonthBudgetItemPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more MonthBudgetItems.
     * @param {MonthBudgetItemDeleteManyArgs} args - Arguments to filter MonthBudgetItems to delete.
     * @example
     * // Delete a few MonthBudgetItems
     * const { count } = await prisma.monthBudgetItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MonthBudgetItemDeleteManyArgs>(args?: SelectSubset<T, MonthBudgetItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MonthBudgetItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MonthBudgetItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MonthBudgetItems
     * const monthBudgetItem = await prisma.monthBudgetItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MonthBudgetItemUpdateManyArgs>(args: SelectSubset<T, MonthBudgetItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MonthBudgetItem.
     * @param {MonthBudgetItemUpsertArgs} args - Arguments to update or create a MonthBudgetItem.
     * @example
     * // Update or create a MonthBudgetItem
     * const monthBudgetItem = await prisma.monthBudgetItem.upsert({
     *   create: {
     *     // ... data to create a MonthBudgetItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MonthBudgetItem we want to update
     *   }
     * })
     */
    upsert<T extends MonthBudgetItemUpsertArgs>(args: SelectSubset<T, MonthBudgetItemUpsertArgs<ExtArgs>>): Prisma__MonthBudgetItemClient<$Result.GetResult<Prisma.$MonthBudgetItemPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of MonthBudgetItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MonthBudgetItemCountArgs} args - Arguments to filter MonthBudgetItems to count.
     * @example
     * // Count the number of MonthBudgetItems
     * const count = await prisma.monthBudgetItem.count({
     *   where: {
     *     // ... the filter for the MonthBudgetItems we want to count
     *   }
     * })
    **/
    count<T extends MonthBudgetItemCountArgs>(
      args?: Subset<T, MonthBudgetItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MonthBudgetItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MonthBudgetItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MonthBudgetItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MonthBudgetItemAggregateArgs>(args: Subset<T, MonthBudgetItemAggregateArgs>): Prisma.PrismaPromise<GetMonthBudgetItemAggregateType<T>>

    /**
     * Group by MonthBudgetItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MonthBudgetItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MonthBudgetItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MonthBudgetItemGroupByArgs['orderBy'] }
        : { orderBy?: MonthBudgetItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MonthBudgetItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMonthBudgetItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MonthBudgetItem model
   */
  readonly fields: MonthBudgetItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MonthBudgetItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MonthBudgetItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Month<T extends MonthDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MonthDefaultArgs<ExtArgs>>): Prisma__MonthClient<$Result.GetResult<Prisma.$MonthPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MonthBudgetItem model
   */ 
  interface MonthBudgetItemFieldRefs {
    readonly id: FieldRef<"MonthBudgetItem", 'Int'>
    readonly amount: FieldRef<"MonthBudgetItem", 'Float'>
    readonly type: FieldRef<"MonthBudgetItem", 'String'>
    readonly monthId: FieldRef<"MonthBudgetItem", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * MonthBudgetItem findUnique
   */
  export type MonthBudgetItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MonthBudgetItem
     */
    select?: MonthBudgetItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonthBudgetItemInclude<ExtArgs> | null
    /**
     * Filter, which MonthBudgetItem to fetch.
     */
    where: MonthBudgetItemWhereUniqueInput
  }

  /**
   * MonthBudgetItem findUniqueOrThrow
   */
  export type MonthBudgetItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MonthBudgetItem
     */
    select?: MonthBudgetItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonthBudgetItemInclude<ExtArgs> | null
    /**
     * Filter, which MonthBudgetItem to fetch.
     */
    where: MonthBudgetItemWhereUniqueInput
  }

  /**
   * MonthBudgetItem findFirst
   */
  export type MonthBudgetItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MonthBudgetItem
     */
    select?: MonthBudgetItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonthBudgetItemInclude<ExtArgs> | null
    /**
     * Filter, which MonthBudgetItem to fetch.
     */
    where?: MonthBudgetItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MonthBudgetItems to fetch.
     */
    orderBy?: MonthBudgetItemOrderByWithRelationInput | MonthBudgetItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MonthBudgetItems.
     */
    cursor?: MonthBudgetItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MonthBudgetItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MonthBudgetItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MonthBudgetItems.
     */
    distinct?: MonthBudgetItemScalarFieldEnum | MonthBudgetItemScalarFieldEnum[]
  }

  /**
   * MonthBudgetItem findFirstOrThrow
   */
  export type MonthBudgetItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MonthBudgetItem
     */
    select?: MonthBudgetItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonthBudgetItemInclude<ExtArgs> | null
    /**
     * Filter, which MonthBudgetItem to fetch.
     */
    where?: MonthBudgetItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MonthBudgetItems to fetch.
     */
    orderBy?: MonthBudgetItemOrderByWithRelationInput | MonthBudgetItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MonthBudgetItems.
     */
    cursor?: MonthBudgetItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MonthBudgetItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MonthBudgetItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MonthBudgetItems.
     */
    distinct?: MonthBudgetItemScalarFieldEnum | MonthBudgetItemScalarFieldEnum[]
  }

  /**
   * MonthBudgetItem findMany
   */
  export type MonthBudgetItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MonthBudgetItem
     */
    select?: MonthBudgetItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonthBudgetItemInclude<ExtArgs> | null
    /**
     * Filter, which MonthBudgetItems to fetch.
     */
    where?: MonthBudgetItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MonthBudgetItems to fetch.
     */
    orderBy?: MonthBudgetItemOrderByWithRelationInput | MonthBudgetItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MonthBudgetItems.
     */
    cursor?: MonthBudgetItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MonthBudgetItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MonthBudgetItems.
     */
    skip?: number
    distinct?: MonthBudgetItemScalarFieldEnum | MonthBudgetItemScalarFieldEnum[]
  }

  /**
   * MonthBudgetItem create
   */
  export type MonthBudgetItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MonthBudgetItem
     */
    select?: MonthBudgetItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonthBudgetItemInclude<ExtArgs> | null
    /**
     * The data needed to create a MonthBudgetItem.
     */
    data: XOR<MonthBudgetItemCreateInput, MonthBudgetItemUncheckedCreateInput>
  }

  /**
   * MonthBudgetItem createMany
   */
  export type MonthBudgetItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MonthBudgetItems.
     */
    data: MonthBudgetItemCreateManyInput | MonthBudgetItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MonthBudgetItem createManyAndReturn
   */
  export type MonthBudgetItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MonthBudgetItem
     */
    select?: MonthBudgetItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many MonthBudgetItems.
     */
    data: MonthBudgetItemCreateManyInput | MonthBudgetItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonthBudgetItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MonthBudgetItem update
   */
  export type MonthBudgetItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MonthBudgetItem
     */
    select?: MonthBudgetItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonthBudgetItemInclude<ExtArgs> | null
    /**
     * The data needed to update a MonthBudgetItem.
     */
    data: XOR<MonthBudgetItemUpdateInput, MonthBudgetItemUncheckedUpdateInput>
    /**
     * Choose, which MonthBudgetItem to update.
     */
    where: MonthBudgetItemWhereUniqueInput
  }

  /**
   * MonthBudgetItem updateMany
   */
  export type MonthBudgetItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MonthBudgetItems.
     */
    data: XOR<MonthBudgetItemUpdateManyMutationInput, MonthBudgetItemUncheckedUpdateManyInput>
    /**
     * Filter which MonthBudgetItems to update
     */
    where?: MonthBudgetItemWhereInput
  }

  /**
   * MonthBudgetItem upsert
   */
  export type MonthBudgetItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MonthBudgetItem
     */
    select?: MonthBudgetItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonthBudgetItemInclude<ExtArgs> | null
    /**
     * The filter to search for the MonthBudgetItem to update in case it exists.
     */
    where: MonthBudgetItemWhereUniqueInput
    /**
     * In case the MonthBudgetItem found by the `where` argument doesn't exist, create a new MonthBudgetItem with this data.
     */
    create: XOR<MonthBudgetItemCreateInput, MonthBudgetItemUncheckedCreateInput>
    /**
     * In case the MonthBudgetItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MonthBudgetItemUpdateInput, MonthBudgetItemUncheckedUpdateInput>
  }

  /**
   * MonthBudgetItem delete
   */
  export type MonthBudgetItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MonthBudgetItem
     */
    select?: MonthBudgetItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonthBudgetItemInclude<ExtArgs> | null
    /**
     * Filter which MonthBudgetItem to delete.
     */
    where: MonthBudgetItemWhereUniqueInput
  }

  /**
   * MonthBudgetItem deleteMany
   */
  export type MonthBudgetItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MonthBudgetItems to delete
     */
    where?: MonthBudgetItemWhereInput
  }

  /**
   * MonthBudgetItem without action
   */
  export type MonthBudgetItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MonthBudgetItem
     */
    select?: MonthBudgetItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonthBudgetItemInclude<ExtArgs> | null
  }


  /**
   * Model MonthlyExpense
   */

  export type AggregateMonthlyExpense = {
    _count: MonthlyExpenseCountAggregateOutputType | null
    _avg: MonthlyExpenseAvgAggregateOutputType | null
    _sum: MonthlyExpenseSumAggregateOutputType | null
    _min: MonthlyExpenseMinAggregateOutputType | null
    _max: MonthlyExpenseMaxAggregateOutputType | null
  }

  export type MonthlyExpenseAvgAggregateOutputType = {
    id: number | null
    amount: number | null
    userId: number | null
  }

  export type MonthlyExpenseSumAggregateOutputType = {
    id: number | null
    amount: number | null
    userId: number | null
  }

  export type MonthlyExpenseMinAggregateOutputType = {
    id: number | null
    type: string | null
    amount: number | null
    userId: number | null
  }

  export type MonthlyExpenseMaxAggregateOutputType = {
    id: number | null
    type: string | null
    amount: number | null
    userId: number | null
  }

  export type MonthlyExpenseCountAggregateOutputType = {
    id: number
    type: number
    amount: number
    userId: number
    _all: number
  }


  export type MonthlyExpenseAvgAggregateInputType = {
    id?: true
    amount?: true
    userId?: true
  }

  export type MonthlyExpenseSumAggregateInputType = {
    id?: true
    amount?: true
    userId?: true
  }

  export type MonthlyExpenseMinAggregateInputType = {
    id?: true
    type?: true
    amount?: true
    userId?: true
  }

  export type MonthlyExpenseMaxAggregateInputType = {
    id?: true
    type?: true
    amount?: true
    userId?: true
  }

  export type MonthlyExpenseCountAggregateInputType = {
    id?: true
    type?: true
    amount?: true
    userId?: true
    _all?: true
  }

  export type MonthlyExpenseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MonthlyExpense to aggregate.
     */
    where?: MonthlyExpenseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MonthlyExpenses to fetch.
     */
    orderBy?: MonthlyExpenseOrderByWithRelationInput | MonthlyExpenseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MonthlyExpenseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MonthlyExpenses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MonthlyExpenses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MonthlyExpenses
    **/
    _count?: true | MonthlyExpenseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MonthlyExpenseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MonthlyExpenseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MonthlyExpenseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MonthlyExpenseMaxAggregateInputType
  }

  export type GetMonthlyExpenseAggregateType<T extends MonthlyExpenseAggregateArgs> = {
        [P in keyof T & keyof AggregateMonthlyExpense]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMonthlyExpense[P]>
      : GetScalarType<T[P], AggregateMonthlyExpense[P]>
  }




  export type MonthlyExpenseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MonthlyExpenseWhereInput
    orderBy?: MonthlyExpenseOrderByWithAggregationInput | MonthlyExpenseOrderByWithAggregationInput[]
    by: MonthlyExpenseScalarFieldEnum[] | MonthlyExpenseScalarFieldEnum
    having?: MonthlyExpenseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MonthlyExpenseCountAggregateInputType | true
    _avg?: MonthlyExpenseAvgAggregateInputType
    _sum?: MonthlyExpenseSumAggregateInputType
    _min?: MonthlyExpenseMinAggregateInputType
    _max?: MonthlyExpenseMaxAggregateInputType
  }

  export type MonthlyExpenseGroupByOutputType = {
    id: number
    type: string
    amount: number
    userId: number
    _count: MonthlyExpenseCountAggregateOutputType | null
    _avg: MonthlyExpenseAvgAggregateOutputType | null
    _sum: MonthlyExpenseSumAggregateOutputType | null
    _min: MonthlyExpenseMinAggregateOutputType | null
    _max: MonthlyExpenseMaxAggregateOutputType | null
  }

  type GetMonthlyExpenseGroupByPayload<T extends MonthlyExpenseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MonthlyExpenseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MonthlyExpenseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MonthlyExpenseGroupByOutputType[P]>
            : GetScalarType<T[P], MonthlyExpenseGroupByOutputType[P]>
        }
      >
    >


  export type MonthlyExpenseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    amount?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["monthlyExpense"]>

  export type MonthlyExpenseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    amount?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["monthlyExpense"]>

  export type MonthlyExpenseSelectScalar = {
    id?: boolean
    type?: boolean
    amount?: boolean
    userId?: boolean
  }

  export type MonthlyExpenseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MonthlyExpenseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $MonthlyExpensePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MonthlyExpense"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      type: string
      amount: number
      userId: number
    }, ExtArgs["result"]["monthlyExpense"]>
    composites: {}
  }

  type MonthlyExpenseGetPayload<S extends boolean | null | undefined | MonthlyExpenseDefaultArgs> = $Result.GetResult<Prisma.$MonthlyExpensePayload, S>

  type MonthlyExpenseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MonthlyExpenseFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MonthlyExpenseCountAggregateInputType | true
    }

  export interface MonthlyExpenseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MonthlyExpense'], meta: { name: 'MonthlyExpense' } }
    /**
     * Find zero or one MonthlyExpense that matches the filter.
     * @param {MonthlyExpenseFindUniqueArgs} args - Arguments to find a MonthlyExpense
     * @example
     * // Get one MonthlyExpense
     * const monthlyExpense = await prisma.monthlyExpense.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MonthlyExpenseFindUniqueArgs>(args: SelectSubset<T, MonthlyExpenseFindUniqueArgs<ExtArgs>>): Prisma__MonthlyExpenseClient<$Result.GetResult<Prisma.$MonthlyExpensePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one MonthlyExpense that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MonthlyExpenseFindUniqueOrThrowArgs} args - Arguments to find a MonthlyExpense
     * @example
     * // Get one MonthlyExpense
     * const monthlyExpense = await prisma.monthlyExpense.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MonthlyExpenseFindUniqueOrThrowArgs>(args: SelectSubset<T, MonthlyExpenseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MonthlyExpenseClient<$Result.GetResult<Prisma.$MonthlyExpensePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first MonthlyExpense that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MonthlyExpenseFindFirstArgs} args - Arguments to find a MonthlyExpense
     * @example
     * // Get one MonthlyExpense
     * const monthlyExpense = await prisma.monthlyExpense.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MonthlyExpenseFindFirstArgs>(args?: SelectSubset<T, MonthlyExpenseFindFirstArgs<ExtArgs>>): Prisma__MonthlyExpenseClient<$Result.GetResult<Prisma.$MonthlyExpensePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first MonthlyExpense that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MonthlyExpenseFindFirstOrThrowArgs} args - Arguments to find a MonthlyExpense
     * @example
     * // Get one MonthlyExpense
     * const monthlyExpense = await prisma.monthlyExpense.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MonthlyExpenseFindFirstOrThrowArgs>(args?: SelectSubset<T, MonthlyExpenseFindFirstOrThrowArgs<ExtArgs>>): Prisma__MonthlyExpenseClient<$Result.GetResult<Prisma.$MonthlyExpensePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more MonthlyExpenses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MonthlyExpenseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MonthlyExpenses
     * const monthlyExpenses = await prisma.monthlyExpense.findMany()
     * 
     * // Get first 10 MonthlyExpenses
     * const monthlyExpenses = await prisma.monthlyExpense.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const monthlyExpenseWithIdOnly = await prisma.monthlyExpense.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MonthlyExpenseFindManyArgs>(args?: SelectSubset<T, MonthlyExpenseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MonthlyExpensePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a MonthlyExpense.
     * @param {MonthlyExpenseCreateArgs} args - Arguments to create a MonthlyExpense.
     * @example
     * // Create one MonthlyExpense
     * const MonthlyExpense = await prisma.monthlyExpense.create({
     *   data: {
     *     // ... data to create a MonthlyExpense
     *   }
     * })
     * 
     */
    create<T extends MonthlyExpenseCreateArgs>(args: SelectSubset<T, MonthlyExpenseCreateArgs<ExtArgs>>): Prisma__MonthlyExpenseClient<$Result.GetResult<Prisma.$MonthlyExpensePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many MonthlyExpenses.
     * @param {MonthlyExpenseCreateManyArgs} args - Arguments to create many MonthlyExpenses.
     * @example
     * // Create many MonthlyExpenses
     * const monthlyExpense = await prisma.monthlyExpense.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MonthlyExpenseCreateManyArgs>(args?: SelectSubset<T, MonthlyExpenseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MonthlyExpenses and returns the data saved in the database.
     * @param {MonthlyExpenseCreateManyAndReturnArgs} args - Arguments to create many MonthlyExpenses.
     * @example
     * // Create many MonthlyExpenses
     * const monthlyExpense = await prisma.monthlyExpense.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MonthlyExpenses and only return the `id`
     * const monthlyExpenseWithIdOnly = await prisma.monthlyExpense.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MonthlyExpenseCreateManyAndReturnArgs>(args?: SelectSubset<T, MonthlyExpenseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MonthlyExpensePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a MonthlyExpense.
     * @param {MonthlyExpenseDeleteArgs} args - Arguments to delete one MonthlyExpense.
     * @example
     * // Delete one MonthlyExpense
     * const MonthlyExpense = await prisma.monthlyExpense.delete({
     *   where: {
     *     // ... filter to delete one MonthlyExpense
     *   }
     * })
     * 
     */
    delete<T extends MonthlyExpenseDeleteArgs>(args: SelectSubset<T, MonthlyExpenseDeleteArgs<ExtArgs>>): Prisma__MonthlyExpenseClient<$Result.GetResult<Prisma.$MonthlyExpensePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one MonthlyExpense.
     * @param {MonthlyExpenseUpdateArgs} args - Arguments to update one MonthlyExpense.
     * @example
     * // Update one MonthlyExpense
     * const monthlyExpense = await prisma.monthlyExpense.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MonthlyExpenseUpdateArgs>(args: SelectSubset<T, MonthlyExpenseUpdateArgs<ExtArgs>>): Prisma__MonthlyExpenseClient<$Result.GetResult<Prisma.$MonthlyExpensePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more MonthlyExpenses.
     * @param {MonthlyExpenseDeleteManyArgs} args - Arguments to filter MonthlyExpenses to delete.
     * @example
     * // Delete a few MonthlyExpenses
     * const { count } = await prisma.monthlyExpense.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MonthlyExpenseDeleteManyArgs>(args?: SelectSubset<T, MonthlyExpenseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MonthlyExpenses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MonthlyExpenseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MonthlyExpenses
     * const monthlyExpense = await prisma.monthlyExpense.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MonthlyExpenseUpdateManyArgs>(args: SelectSubset<T, MonthlyExpenseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MonthlyExpense.
     * @param {MonthlyExpenseUpsertArgs} args - Arguments to update or create a MonthlyExpense.
     * @example
     * // Update or create a MonthlyExpense
     * const monthlyExpense = await prisma.monthlyExpense.upsert({
     *   create: {
     *     // ... data to create a MonthlyExpense
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MonthlyExpense we want to update
     *   }
     * })
     */
    upsert<T extends MonthlyExpenseUpsertArgs>(args: SelectSubset<T, MonthlyExpenseUpsertArgs<ExtArgs>>): Prisma__MonthlyExpenseClient<$Result.GetResult<Prisma.$MonthlyExpensePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of MonthlyExpenses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MonthlyExpenseCountArgs} args - Arguments to filter MonthlyExpenses to count.
     * @example
     * // Count the number of MonthlyExpenses
     * const count = await prisma.monthlyExpense.count({
     *   where: {
     *     // ... the filter for the MonthlyExpenses we want to count
     *   }
     * })
    **/
    count<T extends MonthlyExpenseCountArgs>(
      args?: Subset<T, MonthlyExpenseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MonthlyExpenseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MonthlyExpense.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MonthlyExpenseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MonthlyExpenseAggregateArgs>(args: Subset<T, MonthlyExpenseAggregateArgs>): Prisma.PrismaPromise<GetMonthlyExpenseAggregateType<T>>

    /**
     * Group by MonthlyExpense.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MonthlyExpenseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MonthlyExpenseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MonthlyExpenseGroupByArgs['orderBy'] }
        : { orderBy?: MonthlyExpenseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MonthlyExpenseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMonthlyExpenseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MonthlyExpense model
   */
  readonly fields: MonthlyExpenseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MonthlyExpense.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MonthlyExpenseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MonthlyExpense model
   */ 
  interface MonthlyExpenseFieldRefs {
    readonly id: FieldRef<"MonthlyExpense", 'Int'>
    readonly type: FieldRef<"MonthlyExpense", 'String'>
    readonly amount: FieldRef<"MonthlyExpense", 'Float'>
    readonly userId: FieldRef<"MonthlyExpense", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * MonthlyExpense findUnique
   */
  export type MonthlyExpenseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MonthlyExpense
     */
    select?: MonthlyExpenseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonthlyExpenseInclude<ExtArgs> | null
    /**
     * Filter, which MonthlyExpense to fetch.
     */
    where: MonthlyExpenseWhereUniqueInput
  }

  /**
   * MonthlyExpense findUniqueOrThrow
   */
  export type MonthlyExpenseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MonthlyExpense
     */
    select?: MonthlyExpenseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonthlyExpenseInclude<ExtArgs> | null
    /**
     * Filter, which MonthlyExpense to fetch.
     */
    where: MonthlyExpenseWhereUniqueInput
  }

  /**
   * MonthlyExpense findFirst
   */
  export type MonthlyExpenseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MonthlyExpense
     */
    select?: MonthlyExpenseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonthlyExpenseInclude<ExtArgs> | null
    /**
     * Filter, which MonthlyExpense to fetch.
     */
    where?: MonthlyExpenseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MonthlyExpenses to fetch.
     */
    orderBy?: MonthlyExpenseOrderByWithRelationInput | MonthlyExpenseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MonthlyExpenses.
     */
    cursor?: MonthlyExpenseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MonthlyExpenses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MonthlyExpenses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MonthlyExpenses.
     */
    distinct?: MonthlyExpenseScalarFieldEnum | MonthlyExpenseScalarFieldEnum[]
  }

  /**
   * MonthlyExpense findFirstOrThrow
   */
  export type MonthlyExpenseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MonthlyExpense
     */
    select?: MonthlyExpenseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonthlyExpenseInclude<ExtArgs> | null
    /**
     * Filter, which MonthlyExpense to fetch.
     */
    where?: MonthlyExpenseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MonthlyExpenses to fetch.
     */
    orderBy?: MonthlyExpenseOrderByWithRelationInput | MonthlyExpenseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MonthlyExpenses.
     */
    cursor?: MonthlyExpenseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MonthlyExpenses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MonthlyExpenses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MonthlyExpenses.
     */
    distinct?: MonthlyExpenseScalarFieldEnum | MonthlyExpenseScalarFieldEnum[]
  }

  /**
   * MonthlyExpense findMany
   */
  export type MonthlyExpenseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MonthlyExpense
     */
    select?: MonthlyExpenseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonthlyExpenseInclude<ExtArgs> | null
    /**
     * Filter, which MonthlyExpenses to fetch.
     */
    where?: MonthlyExpenseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MonthlyExpenses to fetch.
     */
    orderBy?: MonthlyExpenseOrderByWithRelationInput | MonthlyExpenseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MonthlyExpenses.
     */
    cursor?: MonthlyExpenseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MonthlyExpenses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MonthlyExpenses.
     */
    skip?: number
    distinct?: MonthlyExpenseScalarFieldEnum | MonthlyExpenseScalarFieldEnum[]
  }

  /**
   * MonthlyExpense create
   */
  export type MonthlyExpenseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MonthlyExpense
     */
    select?: MonthlyExpenseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonthlyExpenseInclude<ExtArgs> | null
    /**
     * The data needed to create a MonthlyExpense.
     */
    data: XOR<MonthlyExpenseCreateInput, MonthlyExpenseUncheckedCreateInput>
  }

  /**
   * MonthlyExpense createMany
   */
  export type MonthlyExpenseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MonthlyExpenses.
     */
    data: MonthlyExpenseCreateManyInput | MonthlyExpenseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MonthlyExpense createManyAndReturn
   */
  export type MonthlyExpenseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MonthlyExpense
     */
    select?: MonthlyExpenseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many MonthlyExpenses.
     */
    data: MonthlyExpenseCreateManyInput | MonthlyExpenseCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonthlyExpenseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MonthlyExpense update
   */
  export type MonthlyExpenseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MonthlyExpense
     */
    select?: MonthlyExpenseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonthlyExpenseInclude<ExtArgs> | null
    /**
     * The data needed to update a MonthlyExpense.
     */
    data: XOR<MonthlyExpenseUpdateInput, MonthlyExpenseUncheckedUpdateInput>
    /**
     * Choose, which MonthlyExpense to update.
     */
    where: MonthlyExpenseWhereUniqueInput
  }

  /**
   * MonthlyExpense updateMany
   */
  export type MonthlyExpenseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MonthlyExpenses.
     */
    data: XOR<MonthlyExpenseUpdateManyMutationInput, MonthlyExpenseUncheckedUpdateManyInput>
    /**
     * Filter which MonthlyExpenses to update
     */
    where?: MonthlyExpenseWhereInput
  }

  /**
   * MonthlyExpense upsert
   */
  export type MonthlyExpenseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MonthlyExpense
     */
    select?: MonthlyExpenseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonthlyExpenseInclude<ExtArgs> | null
    /**
     * The filter to search for the MonthlyExpense to update in case it exists.
     */
    where: MonthlyExpenseWhereUniqueInput
    /**
     * In case the MonthlyExpense found by the `where` argument doesn't exist, create a new MonthlyExpense with this data.
     */
    create: XOR<MonthlyExpenseCreateInput, MonthlyExpenseUncheckedCreateInput>
    /**
     * In case the MonthlyExpense was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MonthlyExpenseUpdateInput, MonthlyExpenseUncheckedUpdateInput>
  }

  /**
   * MonthlyExpense delete
   */
  export type MonthlyExpenseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MonthlyExpense
     */
    select?: MonthlyExpenseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonthlyExpenseInclude<ExtArgs> | null
    /**
     * Filter which MonthlyExpense to delete.
     */
    where: MonthlyExpenseWhereUniqueInput
  }

  /**
   * MonthlyExpense deleteMany
   */
  export type MonthlyExpenseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MonthlyExpenses to delete
     */
    where?: MonthlyExpenseWhereInput
  }

  /**
   * MonthlyExpense without action
   */
  export type MonthlyExpenseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MonthlyExpense
     */
    select?: MonthlyExpenseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonthlyExpenseInclude<ExtArgs> | null
  }


  /**
   * Model Month
   */

  export type AggregateMonth = {
    _count: MonthCountAggregateOutputType | null
    _avg: MonthAvgAggregateOutputType | null
    _sum: MonthSumAggregateOutputType | null
    _min: MonthMinAggregateOutputType | null
    _max: MonthMaxAggregateOutputType | null
  }

  export type MonthAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    year: number | null
    paycheck: number | null
    budgetId: number | null
  }

  export type MonthSumAggregateOutputType = {
    id: number | null
    userId: number | null
    year: number | null
    paycheck: number | null
    budgetId: number | null
  }

  export type MonthMinAggregateOutputType = {
    id: number | null
    userId: number | null
    year: number | null
    paycheck: number | null
    createdAt: Date | null
    budgetId: number | null
  }

  export type MonthMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    year: number | null
    paycheck: number | null
    createdAt: Date | null
    budgetId: number | null
  }

  export type MonthCountAggregateOutputType = {
    id: number
    userId: number
    year: number
    paycheck: number
    createdAt: number
    budgetId: number
    _all: number
  }


  export type MonthAvgAggregateInputType = {
    id?: true
    userId?: true
    year?: true
    paycheck?: true
    budgetId?: true
  }

  export type MonthSumAggregateInputType = {
    id?: true
    userId?: true
    year?: true
    paycheck?: true
    budgetId?: true
  }

  export type MonthMinAggregateInputType = {
    id?: true
    userId?: true
    year?: true
    paycheck?: true
    createdAt?: true
    budgetId?: true
  }

  export type MonthMaxAggregateInputType = {
    id?: true
    userId?: true
    year?: true
    paycheck?: true
    createdAt?: true
    budgetId?: true
  }

  export type MonthCountAggregateInputType = {
    id?: true
    userId?: true
    year?: true
    paycheck?: true
    createdAt?: true
    budgetId?: true
    _all?: true
  }

  export type MonthAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Month to aggregate.
     */
    where?: MonthWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Months to fetch.
     */
    orderBy?: MonthOrderByWithRelationInput | MonthOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MonthWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Months from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Months.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Months
    **/
    _count?: true | MonthCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MonthAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MonthSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MonthMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MonthMaxAggregateInputType
  }

  export type GetMonthAggregateType<T extends MonthAggregateArgs> = {
        [P in keyof T & keyof AggregateMonth]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMonth[P]>
      : GetScalarType<T[P], AggregateMonth[P]>
  }




  export type MonthGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MonthWhereInput
    orderBy?: MonthOrderByWithAggregationInput | MonthOrderByWithAggregationInput[]
    by: MonthScalarFieldEnum[] | MonthScalarFieldEnum
    having?: MonthScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MonthCountAggregateInputType | true
    _avg?: MonthAvgAggregateInputType
    _sum?: MonthSumAggregateInputType
    _min?: MonthMinAggregateInputType
    _max?: MonthMaxAggregateInputType
  }

  export type MonthGroupByOutputType = {
    id: number
    userId: number
    year: number
    paycheck: number
    createdAt: Date
    budgetId: number
    _count: MonthCountAggregateOutputType | null
    _avg: MonthAvgAggregateOutputType | null
    _sum: MonthSumAggregateOutputType | null
    _min: MonthMinAggregateOutputType | null
    _max: MonthMaxAggregateOutputType | null
  }

  type GetMonthGroupByPayload<T extends MonthGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MonthGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MonthGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MonthGroupByOutputType[P]>
            : GetScalarType<T[P], MonthGroupByOutputType[P]>
        }
      >
    >


  export type MonthSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    year?: boolean
    paycheck?: boolean
    createdAt?: boolean
    budgetId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    budget?: boolean | Month$budgetArgs<ExtArgs>
    _count?: boolean | MonthCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["month"]>

  export type MonthSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    year?: boolean
    paycheck?: boolean
    createdAt?: boolean
    budgetId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["month"]>

  export type MonthSelectScalar = {
    id?: boolean
    userId?: boolean
    year?: boolean
    paycheck?: boolean
    createdAt?: boolean
    budgetId?: boolean
  }

  export type MonthInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    budget?: boolean | Month$budgetArgs<ExtArgs>
    _count?: boolean | MonthCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MonthIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $MonthPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Month"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      budget: Prisma.$MonthBudgetItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      year: number
      paycheck: number
      createdAt: Date
      budgetId: number
    }, ExtArgs["result"]["month"]>
    composites: {}
  }

  type MonthGetPayload<S extends boolean | null | undefined | MonthDefaultArgs> = $Result.GetResult<Prisma.$MonthPayload, S>

  type MonthCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MonthFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MonthCountAggregateInputType | true
    }

  export interface MonthDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Month'], meta: { name: 'Month' } }
    /**
     * Find zero or one Month that matches the filter.
     * @param {MonthFindUniqueArgs} args - Arguments to find a Month
     * @example
     * // Get one Month
     * const month = await prisma.month.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MonthFindUniqueArgs>(args: SelectSubset<T, MonthFindUniqueArgs<ExtArgs>>): Prisma__MonthClient<$Result.GetResult<Prisma.$MonthPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Month that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MonthFindUniqueOrThrowArgs} args - Arguments to find a Month
     * @example
     * // Get one Month
     * const month = await prisma.month.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MonthFindUniqueOrThrowArgs>(args: SelectSubset<T, MonthFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MonthClient<$Result.GetResult<Prisma.$MonthPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Month that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MonthFindFirstArgs} args - Arguments to find a Month
     * @example
     * // Get one Month
     * const month = await prisma.month.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MonthFindFirstArgs>(args?: SelectSubset<T, MonthFindFirstArgs<ExtArgs>>): Prisma__MonthClient<$Result.GetResult<Prisma.$MonthPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Month that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MonthFindFirstOrThrowArgs} args - Arguments to find a Month
     * @example
     * // Get one Month
     * const month = await prisma.month.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MonthFindFirstOrThrowArgs>(args?: SelectSubset<T, MonthFindFirstOrThrowArgs<ExtArgs>>): Prisma__MonthClient<$Result.GetResult<Prisma.$MonthPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Months that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MonthFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Months
     * const months = await prisma.month.findMany()
     * 
     * // Get first 10 Months
     * const months = await prisma.month.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const monthWithIdOnly = await prisma.month.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MonthFindManyArgs>(args?: SelectSubset<T, MonthFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MonthPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Month.
     * @param {MonthCreateArgs} args - Arguments to create a Month.
     * @example
     * // Create one Month
     * const Month = await prisma.month.create({
     *   data: {
     *     // ... data to create a Month
     *   }
     * })
     * 
     */
    create<T extends MonthCreateArgs>(args: SelectSubset<T, MonthCreateArgs<ExtArgs>>): Prisma__MonthClient<$Result.GetResult<Prisma.$MonthPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Months.
     * @param {MonthCreateManyArgs} args - Arguments to create many Months.
     * @example
     * // Create many Months
     * const month = await prisma.month.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MonthCreateManyArgs>(args?: SelectSubset<T, MonthCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Months and returns the data saved in the database.
     * @param {MonthCreateManyAndReturnArgs} args - Arguments to create many Months.
     * @example
     * // Create many Months
     * const month = await prisma.month.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Months and only return the `id`
     * const monthWithIdOnly = await prisma.month.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MonthCreateManyAndReturnArgs>(args?: SelectSubset<T, MonthCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MonthPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Month.
     * @param {MonthDeleteArgs} args - Arguments to delete one Month.
     * @example
     * // Delete one Month
     * const Month = await prisma.month.delete({
     *   where: {
     *     // ... filter to delete one Month
     *   }
     * })
     * 
     */
    delete<T extends MonthDeleteArgs>(args: SelectSubset<T, MonthDeleteArgs<ExtArgs>>): Prisma__MonthClient<$Result.GetResult<Prisma.$MonthPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Month.
     * @param {MonthUpdateArgs} args - Arguments to update one Month.
     * @example
     * // Update one Month
     * const month = await prisma.month.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MonthUpdateArgs>(args: SelectSubset<T, MonthUpdateArgs<ExtArgs>>): Prisma__MonthClient<$Result.GetResult<Prisma.$MonthPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Months.
     * @param {MonthDeleteManyArgs} args - Arguments to filter Months to delete.
     * @example
     * // Delete a few Months
     * const { count } = await prisma.month.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MonthDeleteManyArgs>(args?: SelectSubset<T, MonthDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Months.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MonthUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Months
     * const month = await prisma.month.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MonthUpdateManyArgs>(args: SelectSubset<T, MonthUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Month.
     * @param {MonthUpsertArgs} args - Arguments to update or create a Month.
     * @example
     * // Update or create a Month
     * const month = await prisma.month.upsert({
     *   create: {
     *     // ... data to create a Month
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Month we want to update
     *   }
     * })
     */
    upsert<T extends MonthUpsertArgs>(args: SelectSubset<T, MonthUpsertArgs<ExtArgs>>): Prisma__MonthClient<$Result.GetResult<Prisma.$MonthPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Months.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MonthCountArgs} args - Arguments to filter Months to count.
     * @example
     * // Count the number of Months
     * const count = await prisma.month.count({
     *   where: {
     *     // ... the filter for the Months we want to count
     *   }
     * })
    **/
    count<T extends MonthCountArgs>(
      args?: Subset<T, MonthCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MonthCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Month.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MonthAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MonthAggregateArgs>(args: Subset<T, MonthAggregateArgs>): Prisma.PrismaPromise<GetMonthAggregateType<T>>

    /**
     * Group by Month.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MonthGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MonthGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MonthGroupByArgs['orderBy'] }
        : { orderBy?: MonthGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MonthGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMonthGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Month model
   */
  readonly fields: MonthFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Month.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MonthClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    budget<T extends Month$budgetArgs<ExtArgs> = {}>(args?: Subset<T, Month$budgetArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MonthBudgetItemPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Month model
   */ 
  interface MonthFieldRefs {
    readonly id: FieldRef<"Month", 'Int'>
    readonly userId: FieldRef<"Month", 'Int'>
    readonly year: FieldRef<"Month", 'Int'>
    readonly paycheck: FieldRef<"Month", 'Float'>
    readonly createdAt: FieldRef<"Month", 'DateTime'>
    readonly budgetId: FieldRef<"Month", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Month findUnique
   */
  export type MonthFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Month
     */
    select?: MonthSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonthInclude<ExtArgs> | null
    /**
     * Filter, which Month to fetch.
     */
    where: MonthWhereUniqueInput
  }

  /**
   * Month findUniqueOrThrow
   */
  export type MonthFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Month
     */
    select?: MonthSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonthInclude<ExtArgs> | null
    /**
     * Filter, which Month to fetch.
     */
    where: MonthWhereUniqueInput
  }

  /**
   * Month findFirst
   */
  export type MonthFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Month
     */
    select?: MonthSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonthInclude<ExtArgs> | null
    /**
     * Filter, which Month to fetch.
     */
    where?: MonthWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Months to fetch.
     */
    orderBy?: MonthOrderByWithRelationInput | MonthOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Months.
     */
    cursor?: MonthWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Months from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Months.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Months.
     */
    distinct?: MonthScalarFieldEnum | MonthScalarFieldEnum[]
  }

  /**
   * Month findFirstOrThrow
   */
  export type MonthFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Month
     */
    select?: MonthSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonthInclude<ExtArgs> | null
    /**
     * Filter, which Month to fetch.
     */
    where?: MonthWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Months to fetch.
     */
    orderBy?: MonthOrderByWithRelationInput | MonthOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Months.
     */
    cursor?: MonthWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Months from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Months.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Months.
     */
    distinct?: MonthScalarFieldEnum | MonthScalarFieldEnum[]
  }

  /**
   * Month findMany
   */
  export type MonthFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Month
     */
    select?: MonthSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonthInclude<ExtArgs> | null
    /**
     * Filter, which Months to fetch.
     */
    where?: MonthWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Months to fetch.
     */
    orderBy?: MonthOrderByWithRelationInput | MonthOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Months.
     */
    cursor?: MonthWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Months from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Months.
     */
    skip?: number
    distinct?: MonthScalarFieldEnum | MonthScalarFieldEnum[]
  }

  /**
   * Month create
   */
  export type MonthCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Month
     */
    select?: MonthSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonthInclude<ExtArgs> | null
    /**
     * The data needed to create a Month.
     */
    data: XOR<MonthCreateInput, MonthUncheckedCreateInput>
  }

  /**
   * Month createMany
   */
  export type MonthCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Months.
     */
    data: MonthCreateManyInput | MonthCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Month createManyAndReturn
   */
  export type MonthCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Month
     */
    select?: MonthSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Months.
     */
    data: MonthCreateManyInput | MonthCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonthIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Month update
   */
  export type MonthUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Month
     */
    select?: MonthSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonthInclude<ExtArgs> | null
    /**
     * The data needed to update a Month.
     */
    data: XOR<MonthUpdateInput, MonthUncheckedUpdateInput>
    /**
     * Choose, which Month to update.
     */
    where: MonthWhereUniqueInput
  }

  /**
   * Month updateMany
   */
  export type MonthUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Months.
     */
    data: XOR<MonthUpdateManyMutationInput, MonthUncheckedUpdateManyInput>
    /**
     * Filter which Months to update
     */
    where?: MonthWhereInput
  }

  /**
   * Month upsert
   */
  export type MonthUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Month
     */
    select?: MonthSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonthInclude<ExtArgs> | null
    /**
     * The filter to search for the Month to update in case it exists.
     */
    where: MonthWhereUniqueInput
    /**
     * In case the Month found by the `where` argument doesn't exist, create a new Month with this data.
     */
    create: XOR<MonthCreateInput, MonthUncheckedCreateInput>
    /**
     * In case the Month was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MonthUpdateInput, MonthUncheckedUpdateInput>
  }

  /**
   * Month delete
   */
  export type MonthDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Month
     */
    select?: MonthSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonthInclude<ExtArgs> | null
    /**
     * Filter which Month to delete.
     */
    where: MonthWhereUniqueInput
  }

  /**
   * Month deleteMany
   */
  export type MonthDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Months to delete
     */
    where?: MonthWhereInput
  }

  /**
   * Month.budget
   */
  export type Month$budgetArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MonthBudgetItem
     */
    select?: MonthBudgetItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonthBudgetItemInclude<ExtArgs> | null
    where?: MonthBudgetItemWhereInput
    orderBy?: MonthBudgetItemOrderByWithRelationInput | MonthBudgetItemOrderByWithRelationInput[]
    cursor?: MonthBudgetItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MonthBudgetItemScalarFieldEnum | MonthBudgetItemScalarFieldEnum[]
  }

  /**
   * Month without action
   */
  export type MonthDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Month
     */
    select?: MonthSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonthInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    firstName: 'firstName',
    lastName: 'lastName',
    password: 'password',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    expectedDatePaycheck: 'expectedDatePaycheck',
    salaryAmount: 'salaryAmount'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const BudgetItemScalarFieldEnum: {
    id: 'id',
    amount: 'amount',
    type: 'type',
    userId: 'userId'
  };

  export type BudgetItemScalarFieldEnum = (typeof BudgetItemScalarFieldEnum)[keyof typeof BudgetItemScalarFieldEnum]


  export const MonthBudgetItemScalarFieldEnum: {
    id: 'id',
    amount: 'amount',
    type: 'type',
    monthId: 'monthId'
  };

  export type MonthBudgetItemScalarFieldEnum = (typeof MonthBudgetItemScalarFieldEnum)[keyof typeof MonthBudgetItemScalarFieldEnum]


  export const MonthlyExpenseScalarFieldEnum: {
    id: 'id',
    type: 'type',
    amount: 'amount',
    userId: 'userId'
  };

  export type MonthlyExpenseScalarFieldEnum = (typeof MonthlyExpenseScalarFieldEnum)[keyof typeof MonthlyExpenseScalarFieldEnum]


  export const MonthScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    year: 'year',
    paycheck: 'paycheck',
    createdAt: 'createdAt',
    budgetId: 'budgetId'
  };

  export type MonthScalarFieldEnum = (typeof MonthScalarFieldEnum)[keyof typeof MonthScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    password?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    expectedDatePaycheck?: DateTimeNullableFilter<"User"> | Date | string | null
    salaryAmount?: FloatNullableFilter<"User"> | number | null
    months?: MonthListRelationFilter
    monthlyExpenses?: MonthlyExpenseListRelationFilter
    defaultBudget?: BudgetItemListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    expectedDatePaycheck?: SortOrderInput | SortOrder
    salaryAmount?: SortOrderInput | SortOrder
    months?: MonthOrderByRelationAggregateInput
    monthlyExpenses?: MonthlyExpenseOrderByRelationAggregateInput
    defaultBudget?: BudgetItemOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    password?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    expectedDatePaycheck?: DateTimeNullableFilter<"User"> | Date | string | null
    salaryAmount?: FloatNullableFilter<"User"> | number | null
    months?: MonthListRelationFilter
    monthlyExpenses?: MonthlyExpenseListRelationFilter
    defaultBudget?: BudgetItemListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    expectedDatePaycheck?: SortOrderInput | SortOrder
    salaryAmount?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    email?: StringWithAggregatesFilter<"User"> | string
    firstName?: StringNullableWithAggregatesFilter<"User"> | string | null
    lastName?: StringNullableWithAggregatesFilter<"User"> | string | null
    password?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    expectedDatePaycheck?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    salaryAmount?: FloatNullableWithAggregatesFilter<"User"> | number | null
  }

  export type BudgetItemWhereInput = {
    AND?: BudgetItemWhereInput | BudgetItemWhereInput[]
    OR?: BudgetItemWhereInput[]
    NOT?: BudgetItemWhereInput | BudgetItemWhereInput[]
    id?: IntFilter<"BudgetItem"> | number
    amount?: FloatFilter<"BudgetItem"> | number
    type?: StringFilter<"BudgetItem"> | string
    userId?: IntFilter<"BudgetItem"> | number
    User?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type BudgetItemOrderByWithRelationInput = {
    id?: SortOrder
    amount?: SortOrder
    type?: SortOrder
    userId?: SortOrder
    User?: UserOrderByWithRelationInput
  }

  export type BudgetItemWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: BudgetItemWhereInput | BudgetItemWhereInput[]
    OR?: BudgetItemWhereInput[]
    NOT?: BudgetItemWhereInput | BudgetItemWhereInput[]
    amount?: FloatFilter<"BudgetItem"> | number
    type?: StringFilter<"BudgetItem"> | string
    userId?: IntFilter<"BudgetItem"> | number
    User?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type BudgetItemOrderByWithAggregationInput = {
    id?: SortOrder
    amount?: SortOrder
    type?: SortOrder
    userId?: SortOrder
    _count?: BudgetItemCountOrderByAggregateInput
    _avg?: BudgetItemAvgOrderByAggregateInput
    _max?: BudgetItemMaxOrderByAggregateInput
    _min?: BudgetItemMinOrderByAggregateInput
    _sum?: BudgetItemSumOrderByAggregateInput
  }

  export type BudgetItemScalarWhereWithAggregatesInput = {
    AND?: BudgetItemScalarWhereWithAggregatesInput | BudgetItemScalarWhereWithAggregatesInput[]
    OR?: BudgetItemScalarWhereWithAggregatesInput[]
    NOT?: BudgetItemScalarWhereWithAggregatesInput | BudgetItemScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"BudgetItem"> | number
    amount?: FloatWithAggregatesFilter<"BudgetItem"> | number
    type?: StringWithAggregatesFilter<"BudgetItem"> | string
    userId?: IntWithAggregatesFilter<"BudgetItem"> | number
  }

  export type MonthBudgetItemWhereInput = {
    AND?: MonthBudgetItemWhereInput | MonthBudgetItemWhereInput[]
    OR?: MonthBudgetItemWhereInput[]
    NOT?: MonthBudgetItemWhereInput | MonthBudgetItemWhereInput[]
    id?: IntFilter<"MonthBudgetItem"> | number
    amount?: FloatFilter<"MonthBudgetItem"> | number
    type?: StringFilter<"MonthBudgetItem"> | string
    monthId?: IntFilter<"MonthBudgetItem"> | number
    Month?: XOR<MonthRelationFilter, MonthWhereInput>
  }

  export type MonthBudgetItemOrderByWithRelationInput = {
    id?: SortOrder
    amount?: SortOrder
    type?: SortOrder
    monthId?: SortOrder
    Month?: MonthOrderByWithRelationInput
  }

  export type MonthBudgetItemWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MonthBudgetItemWhereInput | MonthBudgetItemWhereInput[]
    OR?: MonthBudgetItemWhereInput[]
    NOT?: MonthBudgetItemWhereInput | MonthBudgetItemWhereInput[]
    amount?: FloatFilter<"MonthBudgetItem"> | number
    type?: StringFilter<"MonthBudgetItem"> | string
    monthId?: IntFilter<"MonthBudgetItem"> | number
    Month?: XOR<MonthRelationFilter, MonthWhereInput>
  }, "id">

  export type MonthBudgetItemOrderByWithAggregationInput = {
    id?: SortOrder
    amount?: SortOrder
    type?: SortOrder
    monthId?: SortOrder
    _count?: MonthBudgetItemCountOrderByAggregateInput
    _avg?: MonthBudgetItemAvgOrderByAggregateInput
    _max?: MonthBudgetItemMaxOrderByAggregateInput
    _min?: MonthBudgetItemMinOrderByAggregateInput
    _sum?: MonthBudgetItemSumOrderByAggregateInput
  }

  export type MonthBudgetItemScalarWhereWithAggregatesInput = {
    AND?: MonthBudgetItemScalarWhereWithAggregatesInput | MonthBudgetItemScalarWhereWithAggregatesInput[]
    OR?: MonthBudgetItemScalarWhereWithAggregatesInput[]
    NOT?: MonthBudgetItemScalarWhereWithAggregatesInput | MonthBudgetItemScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"MonthBudgetItem"> | number
    amount?: FloatWithAggregatesFilter<"MonthBudgetItem"> | number
    type?: StringWithAggregatesFilter<"MonthBudgetItem"> | string
    monthId?: IntWithAggregatesFilter<"MonthBudgetItem"> | number
  }

  export type MonthlyExpenseWhereInput = {
    AND?: MonthlyExpenseWhereInput | MonthlyExpenseWhereInput[]
    OR?: MonthlyExpenseWhereInput[]
    NOT?: MonthlyExpenseWhereInput | MonthlyExpenseWhereInput[]
    id?: IntFilter<"MonthlyExpense"> | number
    type?: StringFilter<"MonthlyExpense"> | string
    amount?: FloatFilter<"MonthlyExpense"> | number
    userId?: IntFilter<"MonthlyExpense"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type MonthlyExpenseOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type MonthlyExpenseWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MonthlyExpenseWhereInput | MonthlyExpenseWhereInput[]
    OR?: MonthlyExpenseWhereInput[]
    NOT?: MonthlyExpenseWhereInput | MonthlyExpenseWhereInput[]
    type?: StringFilter<"MonthlyExpense"> | string
    amount?: FloatFilter<"MonthlyExpense"> | number
    userId?: IntFilter<"MonthlyExpense"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type MonthlyExpenseOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    userId?: SortOrder
    _count?: MonthlyExpenseCountOrderByAggregateInput
    _avg?: MonthlyExpenseAvgOrderByAggregateInput
    _max?: MonthlyExpenseMaxOrderByAggregateInput
    _min?: MonthlyExpenseMinOrderByAggregateInput
    _sum?: MonthlyExpenseSumOrderByAggregateInput
  }

  export type MonthlyExpenseScalarWhereWithAggregatesInput = {
    AND?: MonthlyExpenseScalarWhereWithAggregatesInput | MonthlyExpenseScalarWhereWithAggregatesInput[]
    OR?: MonthlyExpenseScalarWhereWithAggregatesInput[]
    NOT?: MonthlyExpenseScalarWhereWithAggregatesInput | MonthlyExpenseScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"MonthlyExpense"> | number
    type?: StringWithAggregatesFilter<"MonthlyExpense"> | string
    amount?: FloatWithAggregatesFilter<"MonthlyExpense"> | number
    userId?: IntWithAggregatesFilter<"MonthlyExpense"> | number
  }

  export type MonthWhereInput = {
    AND?: MonthWhereInput | MonthWhereInput[]
    OR?: MonthWhereInput[]
    NOT?: MonthWhereInput | MonthWhereInput[]
    id?: IntFilter<"Month"> | number
    userId?: IntFilter<"Month"> | number
    year?: IntFilter<"Month"> | number
    paycheck?: FloatFilter<"Month"> | number
    createdAt?: DateTimeFilter<"Month"> | Date | string
    budgetId?: IntFilter<"Month"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    budget?: MonthBudgetItemListRelationFilter
  }

  export type MonthOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    year?: SortOrder
    paycheck?: SortOrder
    createdAt?: SortOrder
    budgetId?: SortOrder
    user?: UserOrderByWithRelationInput
    budget?: MonthBudgetItemOrderByRelationAggregateInput
  }

  export type MonthWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    budgetId?: number
    AND?: MonthWhereInput | MonthWhereInput[]
    OR?: MonthWhereInput[]
    NOT?: MonthWhereInput | MonthWhereInput[]
    userId?: IntFilter<"Month"> | number
    year?: IntFilter<"Month"> | number
    paycheck?: FloatFilter<"Month"> | number
    createdAt?: DateTimeFilter<"Month"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    budget?: MonthBudgetItemListRelationFilter
  }, "id" | "budgetId">

  export type MonthOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    year?: SortOrder
    paycheck?: SortOrder
    createdAt?: SortOrder
    budgetId?: SortOrder
    _count?: MonthCountOrderByAggregateInput
    _avg?: MonthAvgOrderByAggregateInput
    _max?: MonthMaxOrderByAggregateInput
    _min?: MonthMinOrderByAggregateInput
    _sum?: MonthSumOrderByAggregateInput
  }

  export type MonthScalarWhereWithAggregatesInput = {
    AND?: MonthScalarWhereWithAggregatesInput | MonthScalarWhereWithAggregatesInput[]
    OR?: MonthScalarWhereWithAggregatesInput[]
    NOT?: MonthScalarWhereWithAggregatesInput | MonthScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Month"> | number
    userId?: IntWithAggregatesFilter<"Month"> | number
    year?: IntWithAggregatesFilter<"Month"> | number
    paycheck?: FloatWithAggregatesFilter<"Month"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Month"> | Date | string
    budgetId?: IntWithAggregatesFilter<"Month"> | number
  }

  export type UserCreateInput = {
    email: string
    firstName?: string | null
    lastName?: string | null
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    expectedDatePaycheck?: Date | string | null
    salaryAmount?: number | null
    months?: MonthCreateNestedManyWithoutUserInput
    monthlyExpenses?: MonthlyExpenseCreateNestedManyWithoutUserInput
    defaultBudget?: BudgetItemCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    firstName?: string | null
    lastName?: string | null
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    expectedDatePaycheck?: Date | string | null
    salaryAmount?: number | null
    months?: MonthUncheckedCreateNestedManyWithoutUserInput
    monthlyExpenses?: MonthlyExpenseUncheckedCreateNestedManyWithoutUserInput
    defaultBudget?: BudgetItemUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expectedDatePaycheck?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salaryAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    months?: MonthUpdateManyWithoutUserNestedInput
    monthlyExpenses?: MonthlyExpenseUpdateManyWithoutUserNestedInput
    defaultBudget?: BudgetItemUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expectedDatePaycheck?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salaryAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    months?: MonthUncheckedUpdateManyWithoutUserNestedInput
    monthlyExpenses?: MonthlyExpenseUncheckedUpdateManyWithoutUserNestedInput
    defaultBudget?: BudgetItemUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    firstName?: string | null
    lastName?: string | null
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    expectedDatePaycheck?: Date | string | null
    salaryAmount?: number | null
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expectedDatePaycheck?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salaryAmount?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expectedDatePaycheck?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salaryAmount?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type BudgetItemCreateInput = {
    amount: number
    type: string
    User: UserCreateNestedOneWithoutDefaultBudgetInput
  }

  export type BudgetItemUncheckedCreateInput = {
    id?: number
    amount: number
    type: string
    userId: number
  }

  export type BudgetItemUpdateInput = {
    amount?: FloatFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneRequiredWithoutDefaultBudgetNestedInput
  }

  export type BudgetItemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type BudgetItemCreateManyInput = {
    id?: number
    amount: number
    type: string
    userId: number
  }

  export type BudgetItemUpdateManyMutationInput = {
    amount?: FloatFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
  }

  export type BudgetItemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type MonthBudgetItemCreateInput = {
    amount: number
    type: string
    Month: MonthCreateNestedOneWithoutBudgetInput
  }

  export type MonthBudgetItemUncheckedCreateInput = {
    id?: number
    amount: number
    type: string
    monthId: number
  }

  export type MonthBudgetItemUpdateInput = {
    amount?: FloatFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    Month?: MonthUpdateOneRequiredWithoutBudgetNestedInput
  }

  export type MonthBudgetItemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    monthId?: IntFieldUpdateOperationsInput | number
  }

  export type MonthBudgetItemCreateManyInput = {
    id?: number
    amount: number
    type: string
    monthId: number
  }

  export type MonthBudgetItemUpdateManyMutationInput = {
    amount?: FloatFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
  }

  export type MonthBudgetItemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    monthId?: IntFieldUpdateOperationsInput | number
  }

  export type MonthlyExpenseCreateInput = {
    type: string
    amount: number
    user: UserCreateNestedOneWithoutMonthlyExpensesInput
  }

  export type MonthlyExpenseUncheckedCreateInput = {
    id?: number
    type: string
    amount: number
    userId: number
  }

  export type MonthlyExpenseUpdateInput = {
    type?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutMonthlyExpensesNestedInput
  }

  export type MonthlyExpenseUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type MonthlyExpenseCreateManyInput = {
    id?: number
    type: string
    amount: number
    userId: number
  }

  export type MonthlyExpenseUpdateManyMutationInput = {
    type?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
  }

  export type MonthlyExpenseUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type MonthCreateInput = {
    year: number
    paycheck: number
    createdAt?: Date | string
    budgetId: number
    user: UserCreateNestedOneWithoutMonthsInput
    budget?: MonthBudgetItemCreateNestedManyWithoutMonthInput
  }

  export type MonthUncheckedCreateInput = {
    id?: number
    userId: number
    year: number
    paycheck: number
    createdAt?: Date | string
    budgetId: number
    budget?: MonthBudgetItemUncheckedCreateNestedManyWithoutMonthInput
  }

  export type MonthUpdateInput = {
    year?: IntFieldUpdateOperationsInput | number
    paycheck?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    budgetId?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutMonthsNestedInput
    budget?: MonthBudgetItemUpdateManyWithoutMonthNestedInput
  }

  export type MonthUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    paycheck?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    budgetId?: IntFieldUpdateOperationsInput | number
    budget?: MonthBudgetItemUncheckedUpdateManyWithoutMonthNestedInput
  }

  export type MonthCreateManyInput = {
    id?: number
    userId: number
    year: number
    paycheck: number
    createdAt?: Date | string
    budgetId: number
  }

  export type MonthUpdateManyMutationInput = {
    year?: IntFieldUpdateOperationsInput | number
    paycheck?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    budgetId?: IntFieldUpdateOperationsInput | number
  }

  export type MonthUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    paycheck?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    budgetId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type MonthListRelationFilter = {
    every?: MonthWhereInput
    some?: MonthWhereInput
    none?: MonthWhereInput
  }

  export type MonthlyExpenseListRelationFilter = {
    every?: MonthlyExpenseWhereInput
    some?: MonthlyExpenseWhereInput
    none?: MonthlyExpenseWhereInput
  }

  export type BudgetItemListRelationFilter = {
    every?: BudgetItemWhereInput
    some?: BudgetItemWhereInput
    none?: BudgetItemWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type MonthOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MonthlyExpenseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BudgetItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    expectedDatePaycheck?: SortOrder
    salaryAmount?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    salaryAmount?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    expectedDatePaycheck?: SortOrder
    salaryAmount?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    expectedDatePaycheck?: SortOrder
    salaryAmount?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    salaryAmount?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type BudgetItemCountOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    type?: SortOrder
    userId?: SortOrder
  }

  export type BudgetItemAvgOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    userId?: SortOrder
  }

  export type BudgetItemMaxOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    type?: SortOrder
    userId?: SortOrder
  }

  export type BudgetItemMinOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    type?: SortOrder
    userId?: SortOrder
  }

  export type BudgetItemSumOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    userId?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type MonthRelationFilter = {
    is?: MonthWhereInput
    isNot?: MonthWhereInput
  }

  export type MonthBudgetItemCountOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    type?: SortOrder
    monthId?: SortOrder
  }

  export type MonthBudgetItemAvgOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    monthId?: SortOrder
  }

  export type MonthBudgetItemMaxOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    type?: SortOrder
    monthId?: SortOrder
  }

  export type MonthBudgetItemMinOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    type?: SortOrder
    monthId?: SortOrder
  }

  export type MonthBudgetItemSumOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    monthId?: SortOrder
  }

  export type MonthlyExpenseCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    userId?: SortOrder
  }

  export type MonthlyExpenseAvgOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    userId?: SortOrder
  }

  export type MonthlyExpenseMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    userId?: SortOrder
  }

  export type MonthlyExpenseMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    userId?: SortOrder
  }

  export type MonthlyExpenseSumOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    userId?: SortOrder
  }

  export type MonthBudgetItemListRelationFilter = {
    every?: MonthBudgetItemWhereInput
    some?: MonthBudgetItemWhereInput
    none?: MonthBudgetItemWhereInput
  }

  export type MonthBudgetItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MonthCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    year?: SortOrder
    paycheck?: SortOrder
    createdAt?: SortOrder
    budgetId?: SortOrder
  }

  export type MonthAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    year?: SortOrder
    paycheck?: SortOrder
    budgetId?: SortOrder
  }

  export type MonthMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    year?: SortOrder
    paycheck?: SortOrder
    createdAt?: SortOrder
    budgetId?: SortOrder
  }

  export type MonthMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    year?: SortOrder
    paycheck?: SortOrder
    createdAt?: SortOrder
    budgetId?: SortOrder
  }

  export type MonthSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    year?: SortOrder
    paycheck?: SortOrder
    budgetId?: SortOrder
  }

  export type MonthCreateNestedManyWithoutUserInput = {
    create?: XOR<MonthCreateWithoutUserInput, MonthUncheckedCreateWithoutUserInput> | MonthCreateWithoutUserInput[] | MonthUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MonthCreateOrConnectWithoutUserInput | MonthCreateOrConnectWithoutUserInput[]
    createMany?: MonthCreateManyUserInputEnvelope
    connect?: MonthWhereUniqueInput | MonthWhereUniqueInput[]
  }

  export type MonthlyExpenseCreateNestedManyWithoutUserInput = {
    create?: XOR<MonthlyExpenseCreateWithoutUserInput, MonthlyExpenseUncheckedCreateWithoutUserInput> | MonthlyExpenseCreateWithoutUserInput[] | MonthlyExpenseUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MonthlyExpenseCreateOrConnectWithoutUserInput | MonthlyExpenseCreateOrConnectWithoutUserInput[]
    createMany?: MonthlyExpenseCreateManyUserInputEnvelope
    connect?: MonthlyExpenseWhereUniqueInput | MonthlyExpenseWhereUniqueInput[]
  }

  export type BudgetItemCreateNestedManyWithoutUserInput = {
    create?: XOR<BudgetItemCreateWithoutUserInput, BudgetItemUncheckedCreateWithoutUserInput> | BudgetItemCreateWithoutUserInput[] | BudgetItemUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BudgetItemCreateOrConnectWithoutUserInput | BudgetItemCreateOrConnectWithoutUserInput[]
    createMany?: BudgetItemCreateManyUserInputEnvelope
    connect?: BudgetItemWhereUniqueInput | BudgetItemWhereUniqueInput[]
  }

  export type MonthUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<MonthCreateWithoutUserInput, MonthUncheckedCreateWithoutUserInput> | MonthCreateWithoutUserInput[] | MonthUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MonthCreateOrConnectWithoutUserInput | MonthCreateOrConnectWithoutUserInput[]
    createMany?: MonthCreateManyUserInputEnvelope
    connect?: MonthWhereUniqueInput | MonthWhereUniqueInput[]
  }

  export type MonthlyExpenseUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<MonthlyExpenseCreateWithoutUserInput, MonthlyExpenseUncheckedCreateWithoutUserInput> | MonthlyExpenseCreateWithoutUserInput[] | MonthlyExpenseUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MonthlyExpenseCreateOrConnectWithoutUserInput | MonthlyExpenseCreateOrConnectWithoutUserInput[]
    createMany?: MonthlyExpenseCreateManyUserInputEnvelope
    connect?: MonthlyExpenseWhereUniqueInput | MonthlyExpenseWhereUniqueInput[]
  }

  export type BudgetItemUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<BudgetItemCreateWithoutUserInput, BudgetItemUncheckedCreateWithoutUserInput> | BudgetItemCreateWithoutUserInput[] | BudgetItemUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BudgetItemCreateOrConnectWithoutUserInput | BudgetItemCreateOrConnectWithoutUserInput[]
    createMany?: BudgetItemCreateManyUserInputEnvelope
    connect?: BudgetItemWhereUniqueInput | BudgetItemWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type MonthUpdateManyWithoutUserNestedInput = {
    create?: XOR<MonthCreateWithoutUserInput, MonthUncheckedCreateWithoutUserInput> | MonthCreateWithoutUserInput[] | MonthUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MonthCreateOrConnectWithoutUserInput | MonthCreateOrConnectWithoutUserInput[]
    upsert?: MonthUpsertWithWhereUniqueWithoutUserInput | MonthUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MonthCreateManyUserInputEnvelope
    set?: MonthWhereUniqueInput | MonthWhereUniqueInput[]
    disconnect?: MonthWhereUniqueInput | MonthWhereUniqueInput[]
    delete?: MonthWhereUniqueInput | MonthWhereUniqueInput[]
    connect?: MonthWhereUniqueInput | MonthWhereUniqueInput[]
    update?: MonthUpdateWithWhereUniqueWithoutUserInput | MonthUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MonthUpdateManyWithWhereWithoutUserInput | MonthUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MonthScalarWhereInput | MonthScalarWhereInput[]
  }

  export type MonthlyExpenseUpdateManyWithoutUserNestedInput = {
    create?: XOR<MonthlyExpenseCreateWithoutUserInput, MonthlyExpenseUncheckedCreateWithoutUserInput> | MonthlyExpenseCreateWithoutUserInput[] | MonthlyExpenseUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MonthlyExpenseCreateOrConnectWithoutUserInput | MonthlyExpenseCreateOrConnectWithoutUserInput[]
    upsert?: MonthlyExpenseUpsertWithWhereUniqueWithoutUserInput | MonthlyExpenseUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MonthlyExpenseCreateManyUserInputEnvelope
    set?: MonthlyExpenseWhereUniqueInput | MonthlyExpenseWhereUniqueInput[]
    disconnect?: MonthlyExpenseWhereUniqueInput | MonthlyExpenseWhereUniqueInput[]
    delete?: MonthlyExpenseWhereUniqueInput | MonthlyExpenseWhereUniqueInput[]
    connect?: MonthlyExpenseWhereUniqueInput | MonthlyExpenseWhereUniqueInput[]
    update?: MonthlyExpenseUpdateWithWhereUniqueWithoutUserInput | MonthlyExpenseUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MonthlyExpenseUpdateManyWithWhereWithoutUserInput | MonthlyExpenseUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MonthlyExpenseScalarWhereInput | MonthlyExpenseScalarWhereInput[]
  }

  export type BudgetItemUpdateManyWithoutUserNestedInput = {
    create?: XOR<BudgetItemCreateWithoutUserInput, BudgetItemUncheckedCreateWithoutUserInput> | BudgetItemCreateWithoutUserInput[] | BudgetItemUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BudgetItemCreateOrConnectWithoutUserInput | BudgetItemCreateOrConnectWithoutUserInput[]
    upsert?: BudgetItemUpsertWithWhereUniqueWithoutUserInput | BudgetItemUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BudgetItemCreateManyUserInputEnvelope
    set?: BudgetItemWhereUniqueInput | BudgetItemWhereUniqueInput[]
    disconnect?: BudgetItemWhereUniqueInput | BudgetItemWhereUniqueInput[]
    delete?: BudgetItemWhereUniqueInput | BudgetItemWhereUniqueInput[]
    connect?: BudgetItemWhereUniqueInput | BudgetItemWhereUniqueInput[]
    update?: BudgetItemUpdateWithWhereUniqueWithoutUserInput | BudgetItemUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BudgetItemUpdateManyWithWhereWithoutUserInput | BudgetItemUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BudgetItemScalarWhereInput | BudgetItemScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type MonthUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<MonthCreateWithoutUserInput, MonthUncheckedCreateWithoutUserInput> | MonthCreateWithoutUserInput[] | MonthUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MonthCreateOrConnectWithoutUserInput | MonthCreateOrConnectWithoutUserInput[]
    upsert?: MonthUpsertWithWhereUniqueWithoutUserInput | MonthUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MonthCreateManyUserInputEnvelope
    set?: MonthWhereUniqueInput | MonthWhereUniqueInput[]
    disconnect?: MonthWhereUniqueInput | MonthWhereUniqueInput[]
    delete?: MonthWhereUniqueInput | MonthWhereUniqueInput[]
    connect?: MonthWhereUniqueInput | MonthWhereUniqueInput[]
    update?: MonthUpdateWithWhereUniqueWithoutUserInput | MonthUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MonthUpdateManyWithWhereWithoutUserInput | MonthUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MonthScalarWhereInput | MonthScalarWhereInput[]
  }

  export type MonthlyExpenseUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<MonthlyExpenseCreateWithoutUserInput, MonthlyExpenseUncheckedCreateWithoutUserInput> | MonthlyExpenseCreateWithoutUserInput[] | MonthlyExpenseUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MonthlyExpenseCreateOrConnectWithoutUserInput | MonthlyExpenseCreateOrConnectWithoutUserInput[]
    upsert?: MonthlyExpenseUpsertWithWhereUniqueWithoutUserInput | MonthlyExpenseUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MonthlyExpenseCreateManyUserInputEnvelope
    set?: MonthlyExpenseWhereUniqueInput | MonthlyExpenseWhereUniqueInput[]
    disconnect?: MonthlyExpenseWhereUniqueInput | MonthlyExpenseWhereUniqueInput[]
    delete?: MonthlyExpenseWhereUniqueInput | MonthlyExpenseWhereUniqueInput[]
    connect?: MonthlyExpenseWhereUniqueInput | MonthlyExpenseWhereUniqueInput[]
    update?: MonthlyExpenseUpdateWithWhereUniqueWithoutUserInput | MonthlyExpenseUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MonthlyExpenseUpdateManyWithWhereWithoutUserInput | MonthlyExpenseUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MonthlyExpenseScalarWhereInput | MonthlyExpenseScalarWhereInput[]
  }

  export type BudgetItemUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<BudgetItemCreateWithoutUserInput, BudgetItemUncheckedCreateWithoutUserInput> | BudgetItemCreateWithoutUserInput[] | BudgetItemUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BudgetItemCreateOrConnectWithoutUserInput | BudgetItemCreateOrConnectWithoutUserInput[]
    upsert?: BudgetItemUpsertWithWhereUniqueWithoutUserInput | BudgetItemUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BudgetItemCreateManyUserInputEnvelope
    set?: BudgetItemWhereUniqueInput | BudgetItemWhereUniqueInput[]
    disconnect?: BudgetItemWhereUniqueInput | BudgetItemWhereUniqueInput[]
    delete?: BudgetItemWhereUniqueInput | BudgetItemWhereUniqueInput[]
    connect?: BudgetItemWhereUniqueInput | BudgetItemWhereUniqueInput[]
    update?: BudgetItemUpdateWithWhereUniqueWithoutUserInput | BudgetItemUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BudgetItemUpdateManyWithWhereWithoutUserInput | BudgetItemUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BudgetItemScalarWhereInput | BudgetItemScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutDefaultBudgetInput = {
    create?: XOR<UserCreateWithoutDefaultBudgetInput, UserUncheckedCreateWithoutDefaultBudgetInput>
    connectOrCreate?: UserCreateOrConnectWithoutDefaultBudgetInput
    connect?: UserWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutDefaultBudgetNestedInput = {
    create?: XOR<UserCreateWithoutDefaultBudgetInput, UserUncheckedCreateWithoutDefaultBudgetInput>
    connectOrCreate?: UserCreateOrConnectWithoutDefaultBudgetInput
    upsert?: UserUpsertWithoutDefaultBudgetInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDefaultBudgetInput, UserUpdateWithoutDefaultBudgetInput>, UserUncheckedUpdateWithoutDefaultBudgetInput>
  }

  export type MonthCreateNestedOneWithoutBudgetInput = {
    create?: XOR<MonthCreateWithoutBudgetInput, MonthUncheckedCreateWithoutBudgetInput>
    connectOrCreate?: MonthCreateOrConnectWithoutBudgetInput
    connect?: MonthWhereUniqueInput
  }

  export type MonthUpdateOneRequiredWithoutBudgetNestedInput = {
    create?: XOR<MonthCreateWithoutBudgetInput, MonthUncheckedCreateWithoutBudgetInput>
    connectOrCreate?: MonthCreateOrConnectWithoutBudgetInput
    upsert?: MonthUpsertWithoutBudgetInput
    connect?: MonthWhereUniqueInput
    update?: XOR<XOR<MonthUpdateToOneWithWhereWithoutBudgetInput, MonthUpdateWithoutBudgetInput>, MonthUncheckedUpdateWithoutBudgetInput>
  }

  export type UserCreateNestedOneWithoutMonthlyExpensesInput = {
    create?: XOR<UserCreateWithoutMonthlyExpensesInput, UserUncheckedCreateWithoutMonthlyExpensesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMonthlyExpensesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutMonthlyExpensesNestedInput = {
    create?: XOR<UserCreateWithoutMonthlyExpensesInput, UserUncheckedCreateWithoutMonthlyExpensesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMonthlyExpensesInput
    upsert?: UserUpsertWithoutMonthlyExpensesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMonthlyExpensesInput, UserUpdateWithoutMonthlyExpensesInput>, UserUncheckedUpdateWithoutMonthlyExpensesInput>
  }

  export type UserCreateNestedOneWithoutMonthsInput = {
    create?: XOR<UserCreateWithoutMonthsInput, UserUncheckedCreateWithoutMonthsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMonthsInput
    connect?: UserWhereUniqueInput
  }

  export type MonthBudgetItemCreateNestedManyWithoutMonthInput = {
    create?: XOR<MonthBudgetItemCreateWithoutMonthInput, MonthBudgetItemUncheckedCreateWithoutMonthInput> | MonthBudgetItemCreateWithoutMonthInput[] | MonthBudgetItemUncheckedCreateWithoutMonthInput[]
    connectOrCreate?: MonthBudgetItemCreateOrConnectWithoutMonthInput | MonthBudgetItemCreateOrConnectWithoutMonthInput[]
    createMany?: MonthBudgetItemCreateManyMonthInputEnvelope
    connect?: MonthBudgetItemWhereUniqueInput | MonthBudgetItemWhereUniqueInput[]
  }

  export type MonthBudgetItemUncheckedCreateNestedManyWithoutMonthInput = {
    create?: XOR<MonthBudgetItemCreateWithoutMonthInput, MonthBudgetItemUncheckedCreateWithoutMonthInput> | MonthBudgetItemCreateWithoutMonthInput[] | MonthBudgetItemUncheckedCreateWithoutMonthInput[]
    connectOrCreate?: MonthBudgetItemCreateOrConnectWithoutMonthInput | MonthBudgetItemCreateOrConnectWithoutMonthInput[]
    createMany?: MonthBudgetItemCreateManyMonthInputEnvelope
    connect?: MonthBudgetItemWhereUniqueInput | MonthBudgetItemWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutMonthsNestedInput = {
    create?: XOR<UserCreateWithoutMonthsInput, UserUncheckedCreateWithoutMonthsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMonthsInput
    upsert?: UserUpsertWithoutMonthsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMonthsInput, UserUpdateWithoutMonthsInput>, UserUncheckedUpdateWithoutMonthsInput>
  }

  export type MonthBudgetItemUpdateManyWithoutMonthNestedInput = {
    create?: XOR<MonthBudgetItemCreateWithoutMonthInput, MonthBudgetItemUncheckedCreateWithoutMonthInput> | MonthBudgetItemCreateWithoutMonthInput[] | MonthBudgetItemUncheckedCreateWithoutMonthInput[]
    connectOrCreate?: MonthBudgetItemCreateOrConnectWithoutMonthInput | MonthBudgetItemCreateOrConnectWithoutMonthInput[]
    upsert?: MonthBudgetItemUpsertWithWhereUniqueWithoutMonthInput | MonthBudgetItemUpsertWithWhereUniqueWithoutMonthInput[]
    createMany?: MonthBudgetItemCreateManyMonthInputEnvelope
    set?: MonthBudgetItemWhereUniqueInput | MonthBudgetItemWhereUniqueInput[]
    disconnect?: MonthBudgetItemWhereUniqueInput | MonthBudgetItemWhereUniqueInput[]
    delete?: MonthBudgetItemWhereUniqueInput | MonthBudgetItemWhereUniqueInput[]
    connect?: MonthBudgetItemWhereUniqueInput | MonthBudgetItemWhereUniqueInput[]
    update?: MonthBudgetItemUpdateWithWhereUniqueWithoutMonthInput | MonthBudgetItemUpdateWithWhereUniqueWithoutMonthInput[]
    updateMany?: MonthBudgetItemUpdateManyWithWhereWithoutMonthInput | MonthBudgetItemUpdateManyWithWhereWithoutMonthInput[]
    deleteMany?: MonthBudgetItemScalarWhereInput | MonthBudgetItemScalarWhereInput[]
  }

  export type MonthBudgetItemUncheckedUpdateManyWithoutMonthNestedInput = {
    create?: XOR<MonthBudgetItemCreateWithoutMonthInput, MonthBudgetItemUncheckedCreateWithoutMonthInput> | MonthBudgetItemCreateWithoutMonthInput[] | MonthBudgetItemUncheckedCreateWithoutMonthInput[]
    connectOrCreate?: MonthBudgetItemCreateOrConnectWithoutMonthInput | MonthBudgetItemCreateOrConnectWithoutMonthInput[]
    upsert?: MonthBudgetItemUpsertWithWhereUniqueWithoutMonthInput | MonthBudgetItemUpsertWithWhereUniqueWithoutMonthInput[]
    createMany?: MonthBudgetItemCreateManyMonthInputEnvelope
    set?: MonthBudgetItemWhereUniqueInput | MonthBudgetItemWhereUniqueInput[]
    disconnect?: MonthBudgetItemWhereUniqueInput | MonthBudgetItemWhereUniqueInput[]
    delete?: MonthBudgetItemWhereUniqueInput | MonthBudgetItemWhereUniqueInput[]
    connect?: MonthBudgetItemWhereUniqueInput | MonthBudgetItemWhereUniqueInput[]
    update?: MonthBudgetItemUpdateWithWhereUniqueWithoutMonthInput | MonthBudgetItemUpdateWithWhereUniqueWithoutMonthInput[]
    updateMany?: MonthBudgetItemUpdateManyWithWhereWithoutMonthInput | MonthBudgetItemUpdateManyWithWhereWithoutMonthInput[]
    deleteMany?: MonthBudgetItemScalarWhereInput | MonthBudgetItemScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type MonthCreateWithoutUserInput = {
    year: number
    paycheck: number
    createdAt?: Date | string
    budgetId: number
    budget?: MonthBudgetItemCreateNestedManyWithoutMonthInput
  }

  export type MonthUncheckedCreateWithoutUserInput = {
    id?: number
    year: number
    paycheck: number
    createdAt?: Date | string
    budgetId: number
    budget?: MonthBudgetItemUncheckedCreateNestedManyWithoutMonthInput
  }

  export type MonthCreateOrConnectWithoutUserInput = {
    where: MonthWhereUniqueInput
    create: XOR<MonthCreateWithoutUserInput, MonthUncheckedCreateWithoutUserInput>
  }

  export type MonthCreateManyUserInputEnvelope = {
    data: MonthCreateManyUserInput | MonthCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type MonthlyExpenseCreateWithoutUserInput = {
    type: string
    amount: number
  }

  export type MonthlyExpenseUncheckedCreateWithoutUserInput = {
    id?: number
    type: string
    amount: number
  }

  export type MonthlyExpenseCreateOrConnectWithoutUserInput = {
    where: MonthlyExpenseWhereUniqueInput
    create: XOR<MonthlyExpenseCreateWithoutUserInput, MonthlyExpenseUncheckedCreateWithoutUserInput>
  }

  export type MonthlyExpenseCreateManyUserInputEnvelope = {
    data: MonthlyExpenseCreateManyUserInput | MonthlyExpenseCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type BudgetItemCreateWithoutUserInput = {
    amount: number
    type: string
  }

  export type BudgetItemUncheckedCreateWithoutUserInput = {
    id?: number
    amount: number
    type: string
  }

  export type BudgetItemCreateOrConnectWithoutUserInput = {
    where: BudgetItemWhereUniqueInput
    create: XOR<BudgetItemCreateWithoutUserInput, BudgetItemUncheckedCreateWithoutUserInput>
  }

  export type BudgetItemCreateManyUserInputEnvelope = {
    data: BudgetItemCreateManyUserInput | BudgetItemCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type MonthUpsertWithWhereUniqueWithoutUserInput = {
    where: MonthWhereUniqueInput
    update: XOR<MonthUpdateWithoutUserInput, MonthUncheckedUpdateWithoutUserInput>
    create: XOR<MonthCreateWithoutUserInput, MonthUncheckedCreateWithoutUserInput>
  }

  export type MonthUpdateWithWhereUniqueWithoutUserInput = {
    where: MonthWhereUniqueInput
    data: XOR<MonthUpdateWithoutUserInput, MonthUncheckedUpdateWithoutUserInput>
  }

  export type MonthUpdateManyWithWhereWithoutUserInput = {
    where: MonthScalarWhereInput
    data: XOR<MonthUpdateManyMutationInput, MonthUncheckedUpdateManyWithoutUserInput>
  }

  export type MonthScalarWhereInput = {
    AND?: MonthScalarWhereInput | MonthScalarWhereInput[]
    OR?: MonthScalarWhereInput[]
    NOT?: MonthScalarWhereInput | MonthScalarWhereInput[]
    id?: IntFilter<"Month"> | number
    userId?: IntFilter<"Month"> | number
    year?: IntFilter<"Month"> | number
    paycheck?: FloatFilter<"Month"> | number
    createdAt?: DateTimeFilter<"Month"> | Date | string
    budgetId?: IntFilter<"Month"> | number
  }

  export type MonthlyExpenseUpsertWithWhereUniqueWithoutUserInput = {
    where: MonthlyExpenseWhereUniqueInput
    update: XOR<MonthlyExpenseUpdateWithoutUserInput, MonthlyExpenseUncheckedUpdateWithoutUserInput>
    create: XOR<MonthlyExpenseCreateWithoutUserInput, MonthlyExpenseUncheckedCreateWithoutUserInput>
  }

  export type MonthlyExpenseUpdateWithWhereUniqueWithoutUserInput = {
    where: MonthlyExpenseWhereUniqueInput
    data: XOR<MonthlyExpenseUpdateWithoutUserInput, MonthlyExpenseUncheckedUpdateWithoutUserInput>
  }

  export type MonthlyExpenseUpdateManyWithWhereWithoutUserInput = {
    where: MonthlyExpenseScalarWhereInput
    data: XOR<MonthlyExpenseUpdateManyMutationInput, MonthlyExpenseUncheckedUpdateManyWithoutUserInput>
  }

  export type MonthlyExpenseScalarWhereInput = {
    AND?: MonthlyExpenseScalarWhereInput | MonthlyExpenseScalarWhereInput[]
    OR?: MonthlyExpenseScalarWhereInput[]
    NOT?: MonthlyExpenseScalarWhereInput | MonthlyExpenseScalarWhereInput[]
    id?: IntFilter<"MonthlyExpense"> | number
    type?: StringFilter<"MonthlyExpense"> | string
    amount?: FloatFilter<"MonthlyExpense"> | number
    userId?: IntFilter<"MonthlyExpense"> | number
  }

  export type BudgetItemUpsertWithWhereUniqueWithoutUserInput = {
    where: BudgetItemWhereUniqueInput
    update: XOR<BudgetItemUpdateWithoutUserInput, BudgetItemUncheckedUpdateWithoutUserInput>
    create: XOR<BudgetItemCreateWithoutUserInput, BudgetItemUncheckedCreateWithoutUserInput>
  }

  export type BudgetItemUpdateWithWhereUniqueWithoutUserInput = {
    where: BudgetItemWhereUniqueInput
    data: XOR<BudgetItemUpdateWithoutUserInput, BudgetItemUncheckedUpdateWithoutUserInput>
  }

  export type BudgetItemUpdateManyWithWhereWithoutUserInput = {
    where: BudgetItemScalarWhereInput
    data: XOR<BudgetItemUpdateManyMutationInput, BudgetItemUncheckedUpdateManyWithoutUserInput>
  }

  export type BudgetItemScalarWhereInput = {
    AND?: BudgetItemScalarWhereInput | BudgetItemScalarWhereInput[]
    OR?: BudgetItemScalarWhereInput[]
    NOT?: BudgetItemScalarWhereInput | BudgetItemScalarWhereInput[]
    id?: IntFilter<"BudgetItem"> | number
    amount?: FloatFilter<"BudgetItem"> | number
    type?: StringFilter<"BudgetItem"> | string
    userId?: IntFilter<"BudgetItem"> | number
  }

  export type UserCreateWithoutDefaultBudgetInput = {
    email: string
    firstName?: string | null
    lastName?: string | null
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    expectedDatePaycheck?: Date | string | null
    salaryAmount?: number | null
    months?: MonthCreateNestedManyWithoutUserInput
    monthlyExpenses?: MonthlyExpenseCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutDefaultBudgetInput = {
    id?: number
    email: string
    firstName?: string | null
    lastName?: string | null
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    expectedDatePaycheck?: Date | string | null
    salaryAmount?: number | null
    months?: MonthUncheckedCreateNestedManyWithoutUserInput
    monthlyExpenses?: MonthlyExpenseUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutDefaultBudgetInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDefaultBudgetInput, UserUncheckedCreateWithoutDefaultBudgetInput>
  }

  export type UserUpsertWithoutDefaultBudgetInput = {
    update: XOR<UserUpdateWithoutDefaultBudgetInput, UserUncheckedUpdateWithoutDefaultBudgetInput>
    create: XOR<UserCreateWithoutDefaultBudgetInput, UserUncheckedCreateWithoutDefaultBudgetInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDefaultBudgetInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDefaultBudgetInput, UserUncheckedUpdateWithoutDefaultBudgetInput>
  }

  export type UserUpdateWithoutDefaultBudgetInput = {
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expectedDatePaycheck?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salaryAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    months?: MonthUpdateManyWithoutUserNestedInput
    monthlyExpenses?: MonthlyExpenseUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDefaultBudgetInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expectedDatePaycheck?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salaryAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    months?: MonthUncheckedUpdateManyWithoutUserNestedInput
    monthlyExpenses?: MonthlyExpenseUncheckedUpdateManyWithoutUserNestedInput
  }

  export type MonthCreateWithoutBudgetInput = {
    year: number
    paycheck: number
    createdAt?: Date | string
    budgetId: number
    user: UserCreateNestedOneWithoutMonthsInput
  }

  export type MonthUncheckedCreateWithoutBudgetInput = {
    id?: number
    userId: number
    year: number
    paycheck: number
    createdAt?: Date | string
    budgetId: number
  }

  export type MonthCreateOrConnectWithoutBudgetInput = {
    where: MonthWhereUniqueInput
    create: XOR<MonthCreateWithoutBudgetInput, MonthUncheckedCreateWithoutBudgetInput>
  }

  export type MonthUpsertWithoutBudgetInput = {
    update: XOR<MonthUpdateWithoutBudgetInput, MonthUncheckedUpdateWithoutBudgetInput>
    create: XOR<MonthCreateWithoutBudgetInput, MonthUncheckedCreateWithoutBudgetInput>
    where?: MonthWhereInput
  }

  export type MonthUpdateToOneWithWhereWithoutBudgetInput = {
    where?: MonthWhereInput
    data: XOR<MonthUpdateWithoutBudgetInput, MonthUncheckedUpdateWithoutBudgetInput>
  }

  export type MonthUpdateWithoutBudgetInput = {
    year?: IntFieldUpdateOperationsInput | number
    paycheck?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    budgetId?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutMonthsNestedInput
  }

  export type MonthUncheckedUpdateWithoutBudgetInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    paycheck?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    budgetId?: IntFieldUpdateOperationsInput | number
  }

  export type UserCreateWithoutMonthlyExpensesInput = {
    email: string
    firstName?: string | null
    lastName?: string | null
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    expectedDatePaycheck?: Date | string | null
    salaryAmount?: number | null
    months?: MonthCreateNestedManyWithoutUserInput
    defaultBudget?: BudgetItemCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMonthlyExpensesInput = {
    id?: number
    email: string
    firstName?: string | null
    lastName?: string | null
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    expectedDatePaycheck?: Date | string | null
    salaryAmount?: number | null
    months?: MonthUncheckedCreateNestedManyWithoutUserInput
    defaultBudget?: BudgetItemUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMonthlyExpensesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMonthlyExpensesInput, UserUncheckedCreateWithoutMonthlyExpensesInput>
  }

  export type UserUpsertWithoutMonthlyExpensesInput = {
    update: XOR<UserUpdateWithoutMonthlyExpensesInput, UserUncheckedUpdateWithoutMonthlyExpensesInput>
    create: XOR<UserCreateWithoutMonthlyExpensesInput, UserUncheckedCreateWithoutMonthlyExpensesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMonthlyExpensesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMonthlyExpensesInput, UserUncheckedUpdateWithoutMonthlyExpensesInput>
  }

  export type UserUpdateWithoutMonthlyExpensesInput = {
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expectedDatePaycheck?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salaryAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    months?: MonthUpdateManyWithoutUserNestedInput
    defaultBudget?: BudgetItemUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMonthlyExpensesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expectedDatePaycheck?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salaryAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    months?: MonthUncheckedUpdateManyWithoutUserNestedInput
    defaultBudget?: BudgetItemUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutMonthsInput = {
    email: string
    firstName?: string | null
    lastName?: string | null
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    expectedDatePaycheck?: Date | string | null
    salaryAmount?: number | null
    monthlyExpenses?: MonthlyExpenseCreateNestedManyWithoutUserInput
    defaultBudget?: BudgetItemCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMonthsInput = {
    id?: number
    email: string
    firstName?: string | null
    lastName?: string | null
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    expectedDatePaycheck?: Date | string | null
    salaryAmount?: number | null
    monthlyExpenses?: MonthlyExpenseUncheckedCreateNestedManyWithoutUserInput
    defaultBudget?: BudgetItemUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMonthsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMonthsInput, UserUncheckedCreateWithoutMonthsInput>
  }

  export type MonthBudgetItemCreateWithoutMonthInput = {
    amount: number
    type: string
  }

  export type MonthBudgetItemUncheckedCreateWithoutMonthInput = {
    id?: number
    amount: number
    type: string
  }

  export type MonthBudgetItemCreateOrConnectWithoutMonthInput = {
    where: MonthBudgetItemWhereUniqueInput
    create: XOR<MonthBudgetItemCreateWithoutMonthInput, MonthBudgetItemUncheckedCreateWithoutMonthInput>
  }

  export type MonthBudgetItemCreateManyMonthInputEnvelope = {
    data: MonthBudgetItemCreateManyMonthInput | MonthBudgetItemCreateManyMonthInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutMonthsInput = {
    update: XOR<UserUpdateWithoutMonthsInput, UserUncheckedUpdateWithoutMonthsInput>
    create: XOR<UserCreateWithoutMonthsInput, UserUncheckedCreateWithoutMonthsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMonthsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMonthsInput, UserUncheckedUpdateWithoutMonthsInput>
  }

  export type UserUpdateWithoutMonthsInput = {
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expectedDatePaycheck?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salaryAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    monthlyExpenses?: MonthlyExpenseUpdateManyWithoutUserNestedInput
    defaultBudget?: BudgetItemUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMonthsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expectedDatePaycheck?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salaryAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    monthlyExpenses?: MonthlyExpenseUncheckedUpdateManyWithoutUserNestedInput
    defaultBudget?: BudgetItemUncheckedUpdateManyWithoutUserNestedInput
  }

  export type MonthBudgetItemUpsertWithWhereUniqueWithoutMonthInput = {
    where: MonthBudgetItemWhereUniqueInput
    update: XOR<MonthBudgetItemUpdateWithoutMonthInput, MonthBudgetItemUncheckedUpdateWithoutMonthInput>
    create: XOR<MonthBudgetItemCreateWithoutMonthInput, MonthBudgetItemUncheckedCreateWithoutMonthInput>
  }

  export type MonthBudgetItemUpdateWithWhereUniqueWithoutMonthInput = {
    where: MonthBudgetItemWhereUniqueInput
    data: XOR<MonthBudgetItemUpdateWithoutMonthInput, MonthBudgetItemUncheckedUpdateWithoutMonthInput>
  }

  export type MonthBudgetItemUpdateManyWithWhereWithoutMonthInput = {
    where: MonthBudgetItemScalarWhereInput
    data: XOR<MonthBudgetItemUpdateManyMutationInput, MonthBudgetItemUncheckedUpdateManyWithoutMonthInput>
  }

  export type MonthBudgetItemScalarWhereInput = {
    AND?: MonthBudgetItemScalarWhereInput | MonthBudgetItemScalarWhereInput[]
    OR?: MonthBudgetItemScalarWhereInput[]
    NOT?: MonthBudgetItemScalarWhereInput | MonthBudgetItemScalarWhereInput[]
    id?: IntFilter<"MonthBudgetItem"> | number
    amount?: FloatFilter<"MonthBudgetItem"> | number
    type?: StringFilter<"MonthBudgetItem"> | string
    monthId?: IntFilter<"MonthBudgetItem"> | number
  }

  export type MonthCreateManyUserInput = {
    id?: number
    year: number
    paycheck: number
    createdAt?: Date | string
    budgetId: number
  }

  export type MonthlyExpenseCreateManyUserInput = {
    id?: number
    type: string
    amount: number
  }

  export type BudgetItemCreateManyUserInput = {
    id?: number
    amount: number
    type: string
  }

  export type MonthUpdateWithoutUserInput = {
    year?: IntFieldUpdateOperationsInput | number
    paycheck?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    budgetId?: IntFieldUpdateOperationsInput | number
    budget?: MonthBudgetItemUpdateManyWithoutMonthNestedInput
  }

  export type MonthUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    paycheck?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    budgetId?: IntFieldUpdateOperationsInput | number
    budget?: MonthBudgetItemUncheckedUpdateManyWithoutMonthNestedInput
  }

  export type MonthUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    paycheck?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    budgetId?: IntFieldUpdateOperationsInput | number
  }

  export type MonthlyExpenseUpdateWithoutUserInput = {
    type?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
  }

  export type MonthlyExpenseUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
  }

  export type MonthlyExpenseUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
  }

  export type BudgetItemUpdateWithoutUserInput = {
    amount?: FloatFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
  }

  export type BudgetItemUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
  }

  export type BudgetItemUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
  }

  export type MonthBudgetItemCreateManyMonthInput = {
    id?: number
    amount: number
    type: string
  }

  export type MonthBudgetItemUpdateWithoutMonthInput = {
    amount?: FloatFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
  }

  export type MonthBudgetItemUncheckedUpdateWithoutMonthInput = {
    id?: IntFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
  }

  export type MonthBudgetItemUncheckedUpdateManyWithoutMonthInput = {
    id?: IntFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MonthCountOutputTypeDefaultArgs instead
     */
    export type MonthCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MonthCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BudgetItemDefaultArgs instead
     */
    export type BudgetItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BudgetItemDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MonthBudgetItemDefaultArgs instead
     */
    export type MonthBudgetItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MonthBudgetItemDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MonthlyExpenseDefaultArgs instead
     */
    export type MonthlyExpenseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MonthlyExpenseDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MonthDefaultArgs instead
     */
    export type MonthArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MonthDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}